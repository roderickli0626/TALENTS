#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TALENTS
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TALENTS_dev")]
	public partial class MappingDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBreastSize(BreastSize instance);
    partial void UpdateBreastSize(BreastSize instance);
    partial void DeleteBreastSize(BreastSize instance);
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertDressSize(DressSize instance);
    partial void UpdateDressSize(DressSize instance);
    partial void DeleteDressSize(DressSize instance);
    partial void InsertDuration(Duration instance);
    partial void UpdateDuration(Duration instance);
    partial void DeleteDuration(Duration instance);
    partial void InsertEthnicity(Ethnicity instance);
    partial void UpdateEthnicity(Ethnicity instance);
    partial void DeleteEthnicity(Ethnicity instance);
    partial void InsertEye(Eye instance);
    partial void UpdateEye(Eye instance);
    partial void DeleteEye(Eye instance);
    partial void InsertHairColor(HairColor instance);
    partial void UpdateHairColor(HairColor instance);
    partial void DeleteHairColor(HairColor instance);
    partial void InsertHairLength(HairLength instance);
    partial void UpdateHairLength(HairLength instance);
    partial void DeleteHairLength(HairLength instance);
    partial void InsertIncallPlace(IncallPlace instance);
    partial void UpdateIncallPlace(IncallPlace instance);
    partial void DeleteIncallPlace(IncallPlace instance);
    partial void InsertInstructionChat(InstructionChat instance);
    partial void UpdateInstructionChat(InstructionChat instance);
    partial void DeleteInstructionChat(InstructionChat instance);
    partial void InsertLanguage(Language instance);
    partial void UpdateLanguage(Language instance);
    partial void DeleteLanguage(Language instance);
    partial void InsertNationality(Nationality instance);
    partial void UpdateNationality(Nationality instance);
    partial void DeleteNationality(Nationality instance);
    partial void InsertOutcallPlace(OutcallPlace instance);
    partial void UpdateOutcallPlace(OutcallPlace instance);
    partial void DeleteOutcallPlace(OutcallPlace instance);
    partial void InsertPhotoGroup(PhotoGroup instance);
    partial void UpdatePhotoGroup(PhotoGroup instance);
    partial void DeletePhotoGroup(PhotoGroup instance);
    partial void InsertService(Service instance);
    partial void UpdateService(Service instance);
    partial void DeleteService(Service instance);
    partial void InsertSkillLevel(SkillLevel instance);
    partial void UpdateSkillLevel(SkillLevel instance);
    partial void DeleteSkillLevel(SkillLevel instance);
    partial void InsertSocialChat(SocialChat instance);
    partial void UpdateSocialChat(SocialChat instance);
    partial void DeleteSocialChat(SocialChat instance);
    partial void InsertWorkDay(WorkDay instance);
    partial void UpdateWorkDay(WorkDay instance);
    partial void DeleteWorkDay(WorkDay instance);
    partial void InsertWorkHour(WorkHour instance);
    partial void UpdateWorkHour(WorkHour instance);
    partial void DeleteWorkHour(WorkHour instance);
    partial void InsertModel(Model instance);
    partial void UpdateModel(Model instance);
    partial void DeleteModel(Model instance);
    partial void InsertModIncallPlace(ModIncallPlace instance);
    partial void UpdateModIncallPlace(ModIncallPlace instance);
    partial void DeleteModIncallPlace(ModIncallPlace instance);
    partial void InsertModIncallRate(ModIncallRate instance);
    partial void UpdateModIncallRate(ModIncallRate instance);
    partial void DeleteModIncallRate(ModIncallRate instance);
    partial void InsertModLanguageAlloc(ModLanguageAlloc instance);
    partial void UpdateModLanguageAlloc(ModLanguageAlloc instance);
    partial void DeleteModLanguageAlloc(ModLanguageAlloc instance);
    partial void InsertModNaturalPhoto(ModNaturalPhoto instance);
    partial void UpdateModNaturalPhoto(ModNaturalPhoto instance);
    partial void DeleteModNaturalPhoto(ModNaturalPhoto instance);
    partial void InsertModOutcallPlace(ModOutcallPlace instance);
    partial void UpdateModOutcallPlace(ModOutcallPlace instance);
    partial void DeleteModOutcallPlace(ModOutcallPlace instance);
    partial void InsertModOutcallRate(ModOutcallRate instance);
    partial void UpdateModOutcallRate(ModOutcallRate instance);
    partial void DeleteModOutcallRate(ModOutcallRate instance);
    partial void InsertModPhoto(ModPhoto instance);
    partial void UpdateModPhoto(ModPhoto instance);
    partial void DeleteModPhoto(ModPhoto instance);
    partial void InsertModService(ModService instance);
    partial void UpdateModService(ModService instance);
    partial void DeleteModService(ModService instance);
    partial void InsertModTour(ModTour instance);
    partial void UpdateModTour(ModTour instance);
    partial void DeleteModTour(ModTour instance);
    partial void InsertModVideo(ModVideo instance);
    partial void UpdateModVideo(ModVideo instance);
    partial void DeleteModVideo(ModVideo instance);
    partial void InsertModWorkDayHour(ModWorkDayHour instance);
    partial void UpdateModWorkDayHour(ModWorkDayHour instance);
    partial void DeleteModWorkDayHour(ModWorkDayHour instance);
    partial void InsertModWorkingCityAlloc(ModWorkingCityAlloc instance);
    partial void UpdateModWorkingCityAlloc(ModWorkingCityAlloc instance);
    partial void DeleteModWorkingCityAlloc(ModWorkingCityAlloc instance);
    partial void InsertServiceGroup(ServiceGroup instance);
    partial void UpdateServiceGroup(ServiceGroup instance);
    partial void DeleteServiceGroup(ServiceGroup instance);
    partial void InsertModBiography(ModBiography instance);
    partial void UpdateModBiography(ModBiography instance);
    partial void DeleteModBiography(ModBiography instance);
    partial void InsertModContact(ModContact instance);
    partial void UpdateModContact(ModContact instance);
    partial void DeleteModContact(ModContact instance);
    partial void InsertUserInfo(UserInfo instance);
    partial void UpdateUserInfo(UserInfo instance);
    partial void DeleteUserInfo(UserInfo instance);
    #endregion
		
		public MappingDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MappingDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MappingDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MappingDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BreastSize> BreastSizes
		{
			get
			{
				return this.GetTable<BreastSize>();
			}
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<DressSize> DressSizes
		{
			get
			{
				return this.GetTable<DressSize>();
			}
		}
		
		public System.Data.Linq.Table<Duration> Durations
		{
			get
			{
				return this.GetTable<Duration>();
			}
		}
		
		public System.Data.Linq.Table<Ethnicity> Ethnicities
		{
			get
			{
				return this.GetTable<Ethnicity>();
			}
		}
		
		public System.Data.Linq.Table<Eye> Eyes
		{
			get
			{
				return this.GetTable<Eye>();
			}
		}
		
		public System.Data.Linq.Table<HairColor> HairColors
		{
			get
			{
				return this.GetTable<HairColor>();
			}
		}
		
		public System.Data.Linq.Table<HairLength> HairLengths
		{
			get
			{
				return this.GetTable<HairLength>();
			}
		}
		
		public System.Data.Linq.Table<IncallPlace> IncallPlaces
		{
			get
			{
				return this.GetTable<IncallPlace>();
			}
		}
		
		public System.Data.Linq.Table<InstructionChat> InstructionChats
		{
			get
			{
				return this.GetTable<InstructionChat>();
			}
		}
		
		public System.Data.Linq.Table<Language> Languages
		{
			get
			{
				return this.GetTable<Language>();
			}
		}
		
		public System.Data.Linq.Table<Nationality> Nationalities
		{
			get
			{
				return this.GetTable<Nationality>();
			}
		}
		
		public System.Data.Linq.Table<OutcallPlace> OutcallPlaces
		{
			get
			{
				return this.GetTable<OutcallPlace>();
			}
		}
		
		public System.Data.Linq.Table<PhotoGroup> PhotoGroups
		{
			get
			{
				return this.GetTable<PhotoGroup>();
			}
		}
		
		public System.Data.Linq.Table<Service> Services
		{
			get
			{
				return this.GetTable<Service>();
			}
		}
		
		public System.Data.Linq.Table<SkillLevel> SkillLevels
		{
			get
			{
				return this.GetTable<SkillLevel>();
			}
		}
		
		public System.Data.Linq.Table<SocialChat> SocialChats
		{
			get
			{
				return this.GetTable<SocialChat>();
			}
		}
		
		public System.Data.Linq.Table<WorkDay> WorkDays
		{
			get
			{
				return this.GetTable<WorkDay>();
			}
		}
		
		public System.Data.Linq.Table<WorkHour> WorkHours
		{
			get
			{
				return this.GetTable<WorkHour>();
			}
		}
		
		public System.Data.Linq.Table<Model> Models
		{
			get
			{
				return this.GetTable<Model>();
			}
		}
		
		public System.Data.Linq.Table<ModIncallPlace> ModIncallPlaces
		{
			get
			{
				return this.GetTable<ModIncallPlace>();
			}
		}
		
		public System.Data.Linq.Table<ModIncallRate> ModIncallRates
		{
			get
			{
				return this.GetTable<ModIncallRate>();
			}
		}
		
		public System.Data.Linq.Table<ModLanguageAlloc> ModLanguageAllocs
		{
			get
			{
				return this.GetTable<ModLanguageAlloc>();
			}
		}
		
		public System.Data.Linq.Table<ModNaturalPhoto> ModNaturalPhotos
		{
			get
			{
				return this.GetTable<ModNaturalPhoto>();
			}
		}
		
		public System.Data.Linq.Table<ModOutcallPlace> ModOutcallPlaces
		{
			get
			{
				return this.GetTable<ModOutcallPlace>();
			}
		}
		
		public System.Data.Linq.Table<ModOutcallRate> ModOutcallRates
		{
			get
			{
				return this.GetTable<ModOutcallRate>();
			}
		}
		
		public System.Data.Linq.Table<ModPhoto> ModPhotos
		{
			get
			{
				return this.GetTable<ModPhoto>();
			}
		}
		
		public System.Data.Linq.Table<ModService> ModServices
		{
			get
			{
				return this.GetTable<ModService>();
			}
		}
		
		public System.Data.Linq.Table<ModTour> ModTours
		{
			get
			{
				return this.GetTable<ModTour>();
			}
		}
		
		public System.Data.Linq.Table<ModVideo> ModVideos
		{
			get
			{
				return this.GetTable<ModVideo>();
			}
		}
		
		public System.Data.Linq.Table<ModWorkDayHour> ModWorkDayHours
		{
			get
			{
				return this.GetTable<ModWorkDayHour>();
			}
		}
		
		public System.Data.Linq.Table<ModWorkingCityAlloc> ModWorkingCityAllocs
		{
			get
			{
				return this.GetTable<ModWorkingCityAlloc>();
			}
		}
		
		public System.Data.Linq.Table<ServiceGroup> ServiceGroups
		{
			get
			{
				return this.GetTable<ServiceGroup>();
			}
		}
		
		public System.Data.Linq.Table<ModBiography> ModBiographies
		{
			get
			{
				return this.GetTable<ModBiography>();
			}
		}
		
		public System.Data.Linq.Table<ModContact> ModContacts
		{
			get
			{
				return this.GetTable<ModContact>();
			}
		}
		
		public System.Data.Linq.Table<UserInfo> UserInfos
		{
			get
			{
				return this.GetTable<UserInfo>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BreastSize")]
	public partial class BreastSize : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Description;
		
		private EntitySet<ModBiography> _ModBiographies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public BreastSize()
		{
			this._ModBiographies = new EntitySet<ModBiography>(new Action<ModBiography>(this.attach_ModBiographies), new Action<ModBiography>(this.detach_ModBiographies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BreastSize_ModBiography", Storage="_ModBiographies", ThisKey="Id", OtherKey="BreastSizeId")]
		public EntitySet<ModBiography> ModBiographies
		{
			get
			{
				return this._ModBiographies;
			}
			set
			{
				this._ModBiographies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ModBiographies(ModBiography entity)
		{
			this.SendPropertyChanging();
			entity.BreastSize = this;
		}
		
		private void detach_ModBiographies(ModBiography entity)
		{
			this.SendPropertyChanging();
			entity.BreastSize = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.City")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Description;
		
		private EntitySet<ModTour> _ModTours;
		
		private EntitySet<ModWorkingCityAlloc> _ModWorkingCityAllocs;
		
		private EntitySet<ModBiography> _ModBiographies;
		
		private EntitySet<UserInfo> _UserInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public City()
		{
			this._ModTours = new EntitySet<ModTour>(new Action<ModTour>(this.attach_ModTours), new Action<ModTour>(this.detach_ModTours));
			this._ModWorkingCityAllocs = new EntitySet<ModWorkingCityAlloc>(new Action<ModWorkingCityAlloc>(this.attach_ModWorkingCityAllocs), new Action<ModWorkingCityAlloc>(this.detach_ModWorkingCityAllocs));
			this._ModBiographies = new EntitySet<ModBiography>(new Action<ModBiography>(this.attach_ModBiographies), new Action<ModBiography>(this.detach_ModBiographies));
			this._UserInfos = new EntitySet<UserInfo>(new Action<UserInfo>(this.attach_UserInfos), new Action<UserInfo>(this.detach_UserInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_ModTour", Storage="_ModTours", ThisKey="Id", OtherKey="CityId")]
		public EntitySet<ModTour> ModTours
		{
			get
			{
				return this._ModTours;
			}
			set
			{
				this._ModTours.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_ModWorkingCityAlloc", Storage="_ModWorkingCityAllocs", ThisKey="Id", OtherKey="CityId")]
		public EntitySet<ModWorkingCityAlloc> ModWorkingCityAllocs
		{
			get
			{
				return this._ModWorkingCityAllocs;
			}
			set
			{
				this._ModWorkingCityAllocs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_ModBiography", Storage="_ModBiographies", ThisKey="Id", OtherKey="CityResidenceId")]
		public EntitySet<ModBiography> ModBiographies
		{
			get
			{
				return this._ModBiographies;
			}
			set
			{
				this._ModBiographies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_UserInfo", Storage="_UserInfos", ThisKey="Id", OtherKey="CityResidenceId")]
		public EntitySet<UserInfo> UserInfos
		{
			get
			{
				return this._UserInfos;
			}
			set
			{
				this._UserInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ModTours(ModTour entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_ModTours(ModTour entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_ModWorkingCityAllocs(ModWorkingCityAlloc entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_ModWorkingCityAllocs(ModWorkingCityAlloc entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_ModBiographies(ModBiography entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_ModBiographies(ModBiography entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_UserInfos(UserInfo entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_UserInfos(UserInfo entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DressSize")]
	public partial class DressSize : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Description;
		
		private EntitySet<ModBiography> _ModBiographies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public DressSize()
		{
			this._ModBiographies = new EntitySet<ModBiography>(new Action<ModBiography>(this.attach_ModBiographies), new Action<ModBiography>(this.detach_ModBiographies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DressSize_ModBiography", Storage="_ModBiographies", ThisKey="Id", OtherKey="DressSizeId")]
		public EntitySet<ModBiography> ModBiographies
		{
			get
			{
				return this._ModBiographies;
			}
			set
			{
				this._ModBiographies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ModBiographies(ModBiography entity)
		{
			this.SendPropertyChanging();
			entity.DressSize = this;
		}
		
		private void detach_ModBiographies(ModBiography entity)
		{
			this.SendPropertyChanging();
			entity.DressSize = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Duration")]
	public partial class Duration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Description;
		
		private EntitySet<ModIncallRate> _ModIncallRates;
		
		private EntitySet<ModOutcallRate> _ModOutcallRates;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Duration()
		{
			this._ModIncallRates = new EntitySet<ModIncallRate>(new Action<ModIncallRate>(this.attach_ModIncallRates), new Action<ModIncallRate>(this.detach_ModIncallRates));
			this._ModOutcallRates = new EntitySet<ModOutcallRate>(new Action<ModOutcallRate>(this.attach_ModOutcallRates), new Action<ModOutcallRate>(this.detach_ModOutcallRates));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Duration_ModIncallRate", Storage="_ModIncallRates", ThisKey="Id", OtherKey="DurationId")]
		public EntitySet<ModIncallRate> ModIncallRates
		{
			get
			{
				return this._ModIncallRates;
			}
			set
			{
				this._ModIncallRates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Duration_ModOutcallRate", Storage="_ModOutcallRates", ThisKey="Id", OtherKey="DurationId")]
		public EntitySet<ModOutcallRate> ModOutcallRates
		{
			get
			{
				return this._ModOutcallRates;
			}
			set
			{
				this._ModOutcallRates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ModIncallRates(ModIncallRate entity)
		{
			this.SendPropertyChanging();
			entity.Duration = this;
		}
		
		private void detach_ModIncallRates(ModIncallRate entity)
		{
			this.SendPropertyChanging();
			entity.Duration = null;
		}
		
		private void attach_ModOutcallRates(ModOutcallRate entity)
		{
			this.SendPropertyChanging();
			entity.Duration = this;
		}
		
		private void detach_ModOutcallRates(ModOutcallRate entity)
		{
			this.SendPropertyChanging();
			entity.Duration = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ethnicity")]
	public partial class Ethnicity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Description;
		
		private EntitySet<ModBiography> _ModBiographies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Ethnicity()
		{
			this._ModBiographies = new EntitySet<ModBiography>(new Action<ModBiography>(this.attach_ModBiographies), new Action<ModBiography>(this.detach_ModBiographies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ethnicity_ModBiography", Storage="_ModBiographies", ThisKey="Id", OtherKey="EthnicityId")]
		public EntitySet<ModBiography> ModBiographies
		{
			get
			{
				return this._ModBiographies;
			}
			set
			{
				this._ModBiographies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ModBiographies(ModBiography entity)
		{
			this.SendPropertyChanging();
			entity.Ethnicity = this;
		}
		
		private void detach_ModBiographies(ModBiography entity)
		{
			this.SendPropertyChanging();
			entity.Ethnicity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Eyes")]
	public partial class Eye : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Description;
		
		private EntitySet<ModBiography> _ModBiographies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Eye()
		{
			this._ModBiographies = new EntitySet<ModBiography>(new Action<ModBiography>(this.attach_ModBiographies), new Action<ModBiography>(this.detach_ModBiographies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Eye_ModBiography", Storage="_ModBiographies", ThisKey="Id", OtherKey="EyeId")]
		public EntitySet<ModBiography> ModBiographies
		{
			get
			{
				return this._ModBiographies;
			}
			set
			{
				this._ModBiographies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ModBiographies(ModBiography entity)
		{
			this.SendPropertyChanging();
			entity.Eye = this;
		}
		
		private void detach_ModBiographies(ModBiography entity)
		{
			this.SendPropertyChanging();
			entity.Eye = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HairColor")]
	public partial class HairColor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Description;
		
		private EntitySet<ModBiography> _ModBiographies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public HairColor()
		{
			this._ModBiographies = new EntitySet<ModBiography>(new Action<ModBiography>(this.attach_ModBiographies), new Action<ModBiography>(this.detach_ModBiographies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HairColor_ModBiography", Storage="_ModBiographies", ThisKey="Id", OtherKey="HairColorId")]
		public EntitySet<ModBiography> ModBiographies
		{
			get
			{
				return this._ModBiographies;
			}
			set
			{
				this._ModBiographies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ModBiographies(ModBiography entity)
		{
			this.SendPropertyChanging();
			entity.HairColor = this;
		}
		
		private void detach_ModBiographies(ModBiography entity)
		{
			this.SendPropertyChanging();
			entity.HairColor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HairLength")]
	public partial class HairLength : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Description;
		
		private EntitySet<ModBiography> _ModBiographies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public HairLength()
		{
			this._ModBiographies = new EntitySet<ModBiography>(new Action<ModBiography>(this.attach_ModBiographies), new Action<ModBiography>(this.detach_ModBiographies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HairLength_ModBiography", Storage="_ModBiographies", ThisKey="Id", OtherKey="HairLenghId")]
		public EntitySet<ModBiography> ModBiographies
		{
			get
			{
				return this._ModBiographies;
			}
			set
			{
				this._ModBiographies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ModBiographies(ModBiography entity)
		{
			this.SendPropertyChanging();
			entity.HairLength = this;
		}
		
		private void detach_ModBiographies(ModBiography entity)
		{
			this.SendPropertyChanging();
			entity.HairLength = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IncallPlace")]
	public partial class IncallPlace : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Description;
		
		private EntitySet<ModIncallPlace> _ModIncallPlaces;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public IncallPlace()
		{
			this._ModIncallPlaces = new EntitySet<ModIncallPlace>(new Action<ModIncallPlace>(this.attach_ModIncallPlaces), new Action<ModIncallPlace>(this.detach_ModIncallPlaces));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IncallPlace_ModIncallPlace", Storage="_ModIncallPlaces", ThisKey="Id", OtherKey="IncallPlaceId")]
		public EntitySet<ModIncallPlace> ModIncallPlaces
		{
			get
			{
				return this._ModIncallPlaces;
			}
			set
			{
				this._ModIncallPlaces.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ModIncallPlaces(ModIncallPlace entity)
		{
			this.SendPropertyChanging();
			entity.IncallPlace = this;
		}
		
		private void detach_ModIncallPlaces(ModIncallPlace entity)
		{
			this.SendPropertyChanging();
			entity.IncallPlace = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InstructionChat")]
	public partial class InstructionChat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Description;
		
		private EntitySet<ModContact> _ModContacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public InstructionChat()
		{
			this._ModContacts = new EntitySet<ModContact>(new Action<ModContact>(this.attach_ModContacts), new Action<ModContact>(this.detach_ModContacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InstructionChat_ModContact", Storage="_ModContacts", ThisKey="Id", OtherKey="InstructionChatId")]
		public EntitySet<ModContact> ModContacts
		{
			get
			{
				return this._ModContacts;
			}
			set
			{
				this._ModContacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ModContacts(ModContact entity)
		{
			this.SendPropertyChanging();
			entity.InstructionChat = this;
		}
		
		private void detach_ModContacts(ModContact entity)
		{
			this.SendPropertyChanging();
			entity.InstructionChat = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Language")]
	public partial class Language : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Description;
		
		private EntitySet<ModLanguageAlloc> _ModLanguageAllocs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Language()
		{
			this._ModLanguageAllocs = new EntitySet<ModLanguageAlloc>(new Action<ModLanguageAlloc>(this.attach_ModLanguageAllocs), new Action<ModLanguageAlloc>(this.detach_ModLanguageAllocs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_ModLanguageAlloc", Storage="_ModLanguageAllocs", ThisKey="Id", OtherKey="LanguageId")]
		public EntitySet<ModLanguageAlloc> ModLanguageAllocs
		{
			get
			{
				return this._ModLanguageAllocs;
			}
			set
			{
				this._ModLanguageAllocs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ModLanguageAllocs(ModLanguageAlloc entity)
		{
			this.SendPropertyChanging();
			entity.Language = this;
		}
		
		private void detach_ModLanguageAllocs(ModLanguageAlloc entity)
		{
			this.SendPropertyChanging();
			entity.Language = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Nationality")]
	public partial class Nationality : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Description;
		
		private EntitySet<ModBiography> _ModBiographies;
		
		private EntitySet<UserInfo> _UserInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Nationality()
		{
			this._ModBiographies = new EntitySet<ModBiography>(new Action<ModBiography>(this.attach_ModBiographies), new Action<ModBiography>(this.detach_ModBiographies));
			this._UserInfos = new EntitySet<UserInfo>(new Action<UserInfo>(this.attach_UserInfos), new Action<UserInfo>(this.detach_UserInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nationality_ModBiography", Storage="_ModBiographies", ThisKey="Id", OtherKey="NationalityId")]
		public EntitySet<ModBiography> ModBiographies
		{
			get
			{
				return this._ModBiographies;
			}
			set
			{
				this._ModBiographies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nationality_UserInfo", Storage="_UserInfos", ThisKey="Id", OtherKey="NationalityId")]
		public EntitySet<UserInfo> UserInfos
		{
			get
			{
				return this._UserInfos;
			}
			set
			{
				this._UserInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ModBiographies(ModBiography entity)
		{
			this.SendPropertyChanging();
			entity.Nationality = this;
		}
		
		private void detach_ModBiographies(ModBiography entity)
		{
			this.SendPropertyChanging();
			entity.Nationality = null;
		}
		
		private void attach_UserInfos(UserInfo entity)
		{
			this.SendPropertyChanging();
			entity.Nationality = this;
		}
		
		private void detach_UserInfos(UserInfo entity)
		{
			this.SendPropertyChanging();
			entity.Nationality = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OutcallPlace")]
	public partial class OutcallPlace : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Description;
		
		private EntitySet<ModOutcallPlace> _ModOutcallPlaces;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public OutcallPlace()
		{
			this._ModOutcallPlaces = new EntitySet<ModOutcallPlace>(new Action<ModOutcallPlace>(this.attach_ModOutcallPlaces), new Action<ModOutcallPlace>(this.detach_ModOutcallPlaces));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OutcallPlace_ModOutcallPlace", Storage="_ModOutcallPlaces", ThisKey="Id", OtherKey="OutcallPlaceId")]
		public EntitySet<ModOutcallPlace> ModOutcallPlaces
		{
			get
			{
				return this._ModOutcallPlaces;
			}
			set
			{
				this._ModOutcallPlaces.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ModOutcallPlaces(ModOutcallPlace entity)
		{
			this.SendPropertyChanging();
			entity.OutcallPlace = this;
		}
		
		private void detach_ModOutcallPlaces(ModOutcallPlace entity)
		{
			this.SendPropertyChanging();
			entity.OutcallPlace = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PhotoGroup")]
	public partial class PhotoGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Description;
		
		private string _Note;
		
		private EntitySet<ModPhoto> _ModPhotos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public PhotoGroup()
		{
			this._ModPhotos = new EntitySet<ModPhoto>(new Action<ModPhoto>(this.attach_ModPhotos), new Action<ModPhoto>(this.detach_ModPhotos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="VarChar(MAX)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhotoGroup_ModPhoto", Storage="_ModPhotos", ThisKey="Id", OtherKey="GroupId")]
		public EntitySet<ModPhoto> ModPhotos
		{
			get
			{
				return this._ModPhotos;
			}
			set
			{
				this._ModPhotos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ModPhotos(ModPhoto entity)
		{
			this.SendPropertyChanging();
			entity.PhotoGroup = this;
		}
		
		private void detach_ModPhotos(ModPhoto entity)
		{
			this.SendPropertyChanging();
			entity.PhotoGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Service")]
	public partial class Service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _GroupId;
		
		private string _Description;
		
		private EntitySet<ModService> _ModServices;
		
		private EntityRef<ServiceGroup> _ServiceGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnGroupIdChanging(int value);
    partial void OnGroupIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Service()
		{
			this._ModServices = new EntitySet<ModService>(new Action<ModService>(this.attach_ModServices), new Action<ModService>(this.detach_ModServices));
			this._ServiceGroup = default(EntityRef<ServiceGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int NOT NULL")]
		public int GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._ServiceGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_ModService", Storage="_ModServices", ThisKey="Id", OtherKey="ServiceId")]
		public EntitySet<ModService> ModServices
		{
			get
			{
				return this._ModServices;
			}
			set
			{
				this._ModServices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceGroup_Service", Storage="_ServiceGroup", ThisKey="GroupId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ServiceGroup ServiceGroup
		{
			get
			{
				return this._ServiceGroup.Entity;
			}
			set
			{
				ServiceGroup previousValue = this._ServiceGroup.Entity;
				if (((previousValue != value) 
							|| (this._ServiceGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceGroup.Entity = null;
						previousValue.Services.Remove(this);
					}
					this._ServiceGroup.Entity = value;
					if ((value != null))
					{
						value.Services.Add(this);
						this._GroupId = value.Id;
					}
					else
					{
						this._GroupId = default(int);
					}
					this.SendPropertyChanged("ServiceGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ModServices(ModService entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_ModServices(ModService entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SkillLevel")]
	public partial class SkillLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Description;
		
		private EntitySet<ModLanguageAlloc> _ModLanguageAllocs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public SkillLevel()
		{
			this._ModLanguageAllocs = new EntitySet<ModLanguageAlloc>(new Action<ModLanguageAlloc>(this.attach_ModLanguageAllocs), new Action<ModLanguageAlloc>(this.detach_ModLanguageAllocs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SkillLevel_ModLanguageAlloc", Storage="_ModLanguageAllocs", ThisKey="Id", OtherKey="SkillId")]
		public EntitySet<ModLanguageAlloc> ModLanguageAllocs
		{
			get
			{
				return this._ModLanguageAllocs;
			}
			set
			{
				this._ModLanguageAllocs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ModLanguageAllocs(ModLanguageAlloc entity)
		{
			this.SendPropertyChanging();
			entity.SkillLevel = this;
		}
		
		private void detach_ModLanguageAllocs(ModLanguageAlloc entity)
		{
			this.SendPropertyChanging();
			entity.SkillLevel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SocialChat")]
	public partial class SocialChat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Description;
		
		private EntitySet<ModContact> _ModContacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public SocialChat()
		{
			this._ModContacts = new EntitySet<ModContact>(new Action<ModContact>(this.attach_ModContacts), new Action<ModContact>(this.detach_ModContacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SocialChat_ModContact", Storage="_ModContacts", ThisKey="Id", OtherKey="SocialChatId")]
		public EntitySet<ModContact> ModContacts
		{
			get
			{
				return this._ModContacts;
			}
			set
			{
				this._ModContacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ModContacts(ModContact entity)
		{
			this.SendPropertyChanging();
			entity.SocialChat = this;
		}
		
		private void detach_ModContacts(ModContact entity)
		{
			this.SendPropertyChanging();
			entity.SocialChat = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkDays")]
	public partial class WorkDay : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Description;
		
		private EntitySet<ModWorkDayHour> _ModWorkDayHours;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public WorkDay()
		{
			this._ModWorkDayHours = new EntitySet<ModWorkDayHour>(new Action<ModWorkDayHour>(this.attach_ModWorkDayHours), new Action<ModWorkDayHour>(this.detach_ModWorkDayHours));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkDay_ModWorkDayHour", Storage="_ModWorkDayHours", ThisKey="Id", OtherKey="DayId")]
		public EntitySet<ModWorkDayHour> ModWorkDayHours
		{
			get
			{
				return this._ModWorkDayHours;
			}
			set
			{
				this._ModWorkDayHours.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ModWorkDayHours(ModWorkDayHour entity)
		{
			this.SendPropertyChanging();
			entity.WorkDay = this;
		}
		
		private void detach_ModWorkDayHours(ModWorkDayHour entity)
		{
			this.SendPropertyChanging();
			entity.WorkDay = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkHours")]
	public partial class WorkHour : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Description;
		
		private EntitySet<ModWorkDayHour> _ModWorkDayHours;
		
		private EntitySet<ModWorkDayHour> _ModWorkDayHours1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public WorkHour()
		{
			this._ModWorkDayHours = new EntitySet<ModWorkDayHour>(new Action<ModWorkDayHour>(this.attach_ModWorkDayHours), new Action<ModWorkDayHour>(this.detach_ModWorkDayHours));
			this._ModWorkDayHours1 = new EntitySet<ModWorkDayHour>(new Action<ModWorkDayHour>(this.attach_ModWorkDayHours1), new Action<ModWorkDayHour>(this.detach_ModWorkDayHours1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkHour_ModWorkDayHour", Storage="_ModWorkDayHours", ThisKey="Id", OtherKey="SHourId")]
		public EntitySet<ModWorkDayHour> ModWorkDayHours
		{
			get
			{
				return this._ModWorkDayHours;
			}
			set
			{
				this._ModWorkDayHours.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkHour_ModWorkDayHour1", Storage="_ModWorkDayHours1", ThisKey="Id", OtherKey="EHourId")]
		public EntitySet<ModWorkDayHour> ModWorkDayHours1
		{
			get
			{
				return this._ModWorkDayHours1;
			}
			set
			{
				this._ModWorkDayHours1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ModWorkDayHours(ModWorkDayHour entity)
		{
			this.SendPropertyChanging();
			entity.WorkHour = this;
		}
		
		private void detach_ModWorkDayHours(ModWorkDayHour entity)
		{
			this.SendPropertyChanging();
			entity.WorkHour = null;
		}
		
		private void attach_ModWorkDayHours1(ModWorkDayHour entity)
		{
			this.SendPropertyChanging();
			entity.WorkHour1 = this;
		}
		
		private void detach_ModWorkDayHours1(ModWorkDayHour entity)
		{
			this.SendPropertyChanging();
			entity.WorkHour1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Models")]
	public partial class Model : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Username;
		
		private string _Email;
		
		private string _Password;
		
		private System.Nullable<bool> _IsModel;
		
		private System.Nullable<bool> _IsUser;
		
		private System.Nullable<bool> _IsAdmin;
		
		private EntitySet<ModIncallPlace> _ModIncallPlaces;
		
		private EntitySet<ModLanguageAlloc> _ModLanguageAllocs;
		
		private EntitySet<ModNaturalPhoto> _ModNaturalPhotos;
		
		private EntitySet<ModOutcallPlace> _ModOutcallPlaces;
		
		private EntitySet<ModPhoto> _ModPhotos;
		
		private EntitySet<ModService> _ModServices;
		
		private EntitySet<ModTour> _ModTours;
		
		private EntitySet<ModVideo> _ModVideos;
		
		private EntitySet<ModWorkDayHour> _ModWorkDayHours;
		
		private EntitySet<ModWorkingCityAlloc> _ModWorkingCityAllocs;
		
		private EntitySet<ModBiography> _ModBiographies;
		
		private EntitySet<ModContact> _ModContacts;
		
		private EntitySet<UserInfo> _UserInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnIsModelChanging(System.Nullable<bool> value);
    partial void OnIsModelChanged();
    partial void OnIsUserChanging(System.Nullable<bool> value);
    partial void OnIsUserChanged();
    partial void OnIsAdminChanging(System.Nullable<bool> value);
    partial void OnIsAdminChanged();
    #endregion
		
		public Model()
		{
			this._ModIncallPlaces = new EntitySet<ModIncallPlace>(new Action<ModIncallPlace>(this.attach_ModIncallPlaces), new Action<ModIncallPlace>(this.detach_ModIncallPlaces));
			this._ModLanguageAllocs = new EntitySet<ModLanguageAlloc>(new Action<ModLanguageAlloc>(this.attach_ModLanguageAllocs), new Action<ModLanguageAlloc>(this.detach_ModLanguageAllocs));
			this._ModNaturalPhotos = new EntitySet<ModNaturalPhoto>(new Action<ModNaturalPhoto>(this.attach_ModNaturalPhotos), new Action<ModNaturalPhoto>(this.detach_ModNaturalPhotos));
			this._ModOutcallPlaces = new EntitySet<ModOutcallPlace>(new Action<ModOutcallPlace>(this.attach_ModOutcallPlaces), new Action<ModOutcallPlace>(this.detach_ModOutcallPlaces));
			this._ModPhotos = new EntitySet<ModPhoto>(new Action<ModPhoto>(this.attach_ModPhotos), new Action<ModPhoto>(this.detach_ModPhotos));
			this._ModServices = new EntitySet<ModService>(new Action<ModService>(this.attach_ModServices), new Action<ModService>(this.detach_ModServices));
			this._ModTours = new EntitySet<ModTour>(new Action<ModTour>(this.attach_ModTours), new Action<ModTour>(this.detach_ModTours));
			this._ModVideos = new EntitySet<ModVideo>(new Action<ModVideo>(this.attach_ModVideos), new Action<ModVideo>(this.detach_ModVideos));
			this._ModWorkDayHours = new EntitySet<ModWorkDayHour>(new Action<ModWorkDayHour>(this.attach_ModWorkDayHours), new Action<ModWorkDayHour>(this.detach_ModWorkDayHours));
			this._ModWorkingCityAllocs = new EntitySet<ModWorkingCityAlloc>(new Action<ModWorkingCityAlloc>(this.attach_ModWorkingCityAllocs), new Action<ModWorkingCityAlloc>(this.detach_ModWorkingCityAllocs));
			this._ModBiographies = new EntitySet<ModBiography>(new Action<ModBiography>(this.attach_ModBiographies), new Action<ModBiography>(this.detach_ModBiographies));
			this._ModContacts = new EntitySet<ModContact>(new Action<ModContact>(this.attach_ModContacts), new Action<ModContact>(this.detach_ModContacts));
			this._UserInfos = new EntitySet<UserInfo>(new Action<UserInfo>(this.attach_UserInfos), new Action<UserInfo>(this.detach_UserInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(MAX)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(MAX)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(MAX)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsModel", DbType="Bit")]
		public System.Nullable<bool> IsModel
		{
			get
			{
				return this._IsModel;
			}
			set
			{
				if ((this._IsModel != value))
				{
					this.OnIsModelChanging(value);
					this.SendPropertyChanging();
					this._IsModel = value;
					this.SendPropertyChanged("IsModel");
					this.OnIsModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsUser", DbType="Bit")]
		public System.Nullable<bool> IsUser
		{
			get
			{
				return this._IsUser;
			}
			set
			{
				if ((this._IsUser != value))
				{
					this.OnIsUserChanging(value);
					this.SendPropertyChanging();
					this._IsUser = value;
					this.SendPropertyChanged("IsUser");
					this.OnIsUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAdmin", DbType="Bit")]
		public System.Nullable<bool> IsAdmin
		{
			get
			{
				return this._IsAdmin;
			}
			set
			{
				if ((this._IsAdmin != value))
				{
					this.OnIsAdminChanging(value);
					this.SendPropertyChanging();
					this._IsAdmin = value;
					this.SendPropertyChanged("IsAdmin");
					this.OnIsAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_ModIncallPlace", Storage="_ModIncallPlaces", ThisKey="Id", OtherKey="ModelId")]
		public EntitySet<ModIncallPlace> ModIncallPlaces
		{
			get
			{
				return this._ModIncallPlaces;
			}
			set
			{
				this._ModIncallPlaces.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_ModLanguageAlloc", Storage="_ModLanguageAllocs", ThisKey="Id", OtherKey="ModelId")]
		public EntitySet<ModLanguageAlloc> ModLanguageAllocs
		{
			get
			{
				return this._ModLanguageAllocs;
			}
			set
			{
				this._ModLanguageAllocs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_ModNaturalPhoto", Storage="_ModNaturalPhotos", ThisKey="Id", OtherKey="ModelId")]
		public EntitySet<ModNaturalPhoto> ModNaturalPhotos
		{
			get
			{
				return this._ModNaturalPhotos;
			}
			set
			{
				this._ModNaturalPhotos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_ModOutcallPlace", Storage="_ModOutcallPlaces", ThisKey="Id", OtherKey="ModelId")]
		public EntitySet<ModOutcallPlace> ModOutcallPlaces
		{
			get
			{
				return this._ModOutcallPlaces;
			}
			set
			{
				this._ModOutcallPlaces.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_ModPhoto", Storage="_ModPhotos", ThisKey="Id", OtherKey="ModelId")]
		public EntitySet<ModPhoto> ModPhotos
		{
			get
			{
				return this._ModPhotos;
			}
			set
			{
				this._ModPhotos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_ModService", Storage="_ModServices", ThisKey="Id", OtherKey="ModelId")]
		public EntitySet<ModService> ModServices
		{
			get
			{
				return this._ModServices;
			}
			set
			{
				this._ModServices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_ModTour", Storage="_ModTours", ThisKey="Id", OtherKey="ModelId")]
		public EntitySet<ModTour> ModTours
		{
			get
			{
				return this._ModTours;
			}
			set
			{
				this._ModTours.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_ModVideo", Storage="_ModVideos", ThisKey="Id", OtherKey="ModelId")]
		public EntitySet<ModVideo> ModVideos
		{
			get
			{
				return this._ModVideos;
			}
			set
			{
				this._ModVideos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_ModWorkDayHour", Storage="_ModWorkDayHours", ThisKey="Id", OtherKey="ModelId")]
		public EntitySet<ModWorkDayHour> ModWorkDayHours
		{
			get
			{
				return this._ModWorkDayHours;
			}
			set
			{
				this._ModWorkDayHours.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_ModWorkingCityAlloc", Storage="_ModWorkingCityAllocs", ThisKey="Id", OtherKey="ModelId")]
		public EntitySet<ModWorkingCityAlloc> ModWorkingCityAllocs
		{
			get
			{
				return this._ModWorkingCityAllocs;
			}
			set
			{
				this._ModWorkingCityAllocs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_ModBiography", Storage="_ModBiographies", ThisKey="Id", OtherKey="ModelId")]
		public EntitySet<ModBiography> ModBiographies
		{
			get
			{
				return this._ModBiographies;
			}
			set
			{
				this._ModBiographies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_ModContact", Storage="_ModContacts", ThisKey="Id", OtherKey="ModelId")]
		public EntitySet<ModContact> ModContacts
		{
			get
			{
				return this._ModContacts;
			}
			set
			{
				this._ModContacts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_UserInfo", Storage="_UserInfos", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<UserInfo> UserInfos
		{
			get
			{
				return this._UserInfos;
			}
			set
			{
				this._UserInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ModIncallPlaces(ModIncallPlace entity)
		{
			this.SendPropertyChanging();
			entity.Model = this;
		}
		
		private void detach_ModIncallPlaces(ModIncallPlace entity)
		{
			this.SendPropertyChanging();
			entity.Model = null;
		}
		
		private void attach_ModLanguageAllocs(ModLanguageAlloc entity)
		{
			this.SendPropertyChanging();
			entity.Model = this;
		}
		
		private void detach_ModLanguageAllocs(ModLanguageAlloc entity)
		{
			this.SendPropertyChanging();
			entity.Model = null;
		}
		
		private void attach_ModNaturalPhotos(ModNaturalPhoto entity)
		{
			this.SendPropertyChanging();
			entity.Model = this;
		}
		
		private void detach_ModNaturalPhotos(ModNaturalPhoto entity)
		{
			this.SendPropertyChanging();
			entity.Model = null;
		}
		
		private void attach_ModOutcallPlaces(ModOutcallPlace entity)
		{
			this.SendPropertyChanging();
			entity.Model = this;
		}
		
		private void detach_ModOutcallPlaces(ModOutcallPlace entity)
		{
			this.SendPropertyChanging();
			entity.Model = null;
		}
		
		private void attach_ModPhotos(ModPhoto entity)
		{
			this.SendPropertyChanging();
			entity.Model = this;
		}
		
		private void detach_ModPhotos(ModPhoto entity)
		{
			this.SendPropertyChanging();
			entity.Model = null;
		}
		
		private void attach_ModServices(ModService entity)
		{
			this.SendPropertyChanging();
			entity.Model = this;
		}
		
		private void detach_ModServices(ModService entity)
		{
			this.SendPropertyChanging();
			entity.Model = null;
		}
		
		private void attach_ModTours(ModTour entity)
		{
			this.SendPropertyChanging();
			entity.Model = this;
		}
		
		private void detach_ModTours(ModTour entity)
		{
			this.SendPropertyChanging();
			entity.Model = null;
		}
		
		private void attach_ModVideos(ModVideo entity)
		{
			this.SendPropertyChanging();
			entity.Model = this;
		}
		
		private void detach_ModVideos(ModVideo entity)
		{
			this.SendPropertyChanging();
			entity.Model = null;
		}
		
		private void attach_ModWorkDayHours(ModWorkDayHour entity)
		{
			this.SendPropertyChanging();
			entity.Model = this;
		}
		
		private void detach_ModWorkDayHours(ModWorkDayHour entity)
		{
			this.SendPropertyChanging();
			entity.Model = null;
		}
		
		private void attach_ModWorkingCityAllocs(ModWorkingCityAlloc entity)
		{
			this.SendPropertyChanging();
			entity.Model = this;
		}
		
		private void detach_ModWorkingCityAllocs(ModWorkingCityAlloc entity)
		{
			this.SendPropertyChanging();
			entity.Model = null;
		}
		
		private void attach_ModBiographies(ModBiography entity)
		{
			this.SendPropertyChanging();
			entity.Model = this;
		}
		
		private void detach_ModBiographies(ModBiography entity)
		{
			this.SendPropertyChanging();
			entity.Model = null;
		}
		
		private void attach_ModContacts(ModContact entity)
		{
			this.SendPropertyChanging();
			entity.Model = this;
		}
		
		private void detach_ModContacts(ModContact entity)
		{
			this.SendPropertyChanging();
			entity.Model = null;
		}
		
		private void attach_UserInfos(UserInfo entity)
		{
			this.SendPropertyChanging();
			entity.Model = this;
		}
		
		private void detach_UserInfos(UserInfo entity)
		{
			this.SendPropertyChanging();
			entity.Model = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ModIncallPlace")]
	public partial class ModIncallPlace : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ModelId;
		
		private int _IncallPlaceId;
		
		private EntitySet<ModIncallRate> _ModIncallRates;
		
		private EntityRef<IncallPlace> _IncallPlace;
		
		private EntityRef<Model> _Model;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnModelIdChanging(int value);
    partial void OnModelIdChanged();
    partial void OnIncallPlaceIdChanging(int value);
    partial void OnIncallPlaceIdChanged();
    #endregion
		
		public ModIncallPlace()
		{
			this._ModIncallRates = new EntitySet<ModIncallRate>(new Action<ModIncallRate>(this.attach_ModIncallRates), new Action<ModIncallRate>(this.detach_ModIncallRates));
			this._IncallPlace = default(EntityRef<IncallPlace>);
			this._Model = default(EntityRef<Model>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelId", DbType="Int NOT NULL")]
		public int ModelId
		{
			get
			{
				return this._ModelId;
			}
			set
			{
				if ((this._ModelId != value))
				{
					if (this._Model.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModelIdChanging(value);
					this.SendPropertyChanging();
					this._ModelId = value;
					this.SendPropertyChanged("ModelId");
					this.OnModelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncallPlaceId", DbType="Int NOT NULL")]
		public int IncallPlaceId
		{
			get
			{
				return this._IncallPlaceId;
			}
			set
			{
				if ((this._IncallPlaceId != value))
				{
					if (this._IncallPlace.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIncallPlaceIdChanging(value);
					this.SendPropertyChanging();
					this._IncallPlaceId = value;
					this.SendPropertyChanged("IncallPlaceId");
					this.OnIncallPlaceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ModIncallPlace_ModIncallRate", Storage="_ModIncallRates", ThisKey="Id", OtherKey="ModIncallPlaceId")]
		public EntitySet<ModIncallRate> ModIncallRates
		{
			get
			{
				return this._ModIncallRates;
			}
			set
			{
				this._ModIncallRates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IncallPlace_ModIncallPlace", Storage="_IncallPlace", ThisKey="IncallPlaceId", OtherKey="Id", IsForeignKey=true)]
		public IncallPlace IncallPlace
		{
			get
			{
				return this._IncallPlace.Entity;
			}
			set
			{
				IncallPlace previousValue = this._IncallPlace.Entity;
				if (((previousValue != value) 
							|| (this._IncallPlace.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IncallPlace.Entity = null;
						previousValue.ModIncallPlaces.Remove(this);
					}
					this._IncallPlace.Entity = value;
					if ((value != null))
					{
						value.ModIncallPlaces.Add(this);
						this._IncallPlaceId = value.Id;
					}
					else
					{
						this._IncallPlaceId = default(int);
					}
					this.SendPropertyChanged("IncallPlace");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_ModIncallPlace", Storage="_Model", ThisKey="ModelId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Model Model
		{
			get
			{
				return this._Model.Entity;
			}
			set
			{
				Model previousValue = this._Model.Entity;
				if (((previousValue != value) 
							|| (this._Model.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Model.Entity = null;
						previousValue.ModIncallPlaces.Remove(this);
					}
					this._Model.Entity = value;
					if ((value != null))
					{
						value.ModIncallPlaces.Add(this);
						this._ModelId = value.Id;
					}
					else
					{
						this._ModelId = default(int);
					}
					this.SendPropertyChanged("Model");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ModIncallRates(ModIncallRate entity)
		{
			this.SendPropertyChanging();
			entity.ModIncallPlace = this;
		}
		
		private void detach_ModIncallRates(ModIncallRate entity)
		{
			this.SendPropertyChanging();
			entity.ModIncallPlace = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ModIncallRate")]
	public partial class ModIncallRate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ModIncallPlaceId;
		
		private System.Nullable<double> _Amount;
		
		private int _DurationId;
		
		private EntityRef<Duration> _Duration;
		
		private EntityRef<ModIncallPlace> _ModIncallPlace;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnModIncallPlaceIdChanging(int value);
    partial void OnModIncallPlaceIdChanged();
    partial void OnAmountChanging(System.Nullable<double> value);
    partial void OnAmountChanged();
    partial void OnDurationIdChanging(int value);
    partial void OnDurationIdChanged();
    #endregion
		
		public ModIncallRate()
		{
			this._Duration = default(EntityRef<Duration>);
			this._ModIncallPlace = default(EntityRef<ModIncallPlace>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModIncallPlaceId", DbType="Int NOT NULL")]
		public int ModIncallPlaceId
		{
			get
			{
				return this._ModIncallPlaceId;
			}
			set
			{
				if ((this._ModIncallPlaceId != value))
				{
					if (this._ModIncallPlace.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModIncallPlaceIdChanging(value);
					this.SendPropertyChanging();
					this._ModIncallPlaceId = value;
					this.SendPropertyChanged("ModIncallPlaceId");
					this.OnModIncallPlaceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float")]
		public System.Nullable<double> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DurationId", DbType="Int NOT NULL")]
		public int DurationId
		{
			get
			{
				return this._DurationId;
			}
			set
			{
				if ((this._DurationId != value))
				{
					if (this._Duration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDurationIdChanging(value);
					this.SendPropertyChanging();
					this._DurationId = value;
					this.SendPropertyChanged("DurationId");
					this.OnDurationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Duration_ModIncallRate", Storage="_Duration", ThisKey="DurationId", OtherKey="Id", IsForeignKey=true)]
		public Duration Duration
		{
			get
			{
				return this._Duration.Entity;
			}
			set
			{
				Duration previousValue = this._Duration.Entity;
				if (((previousValue != value) 
							|| (this._Duration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Duration.Entity = null;
						previousValue.ModIncallRates.Remove(this);
					}
					this._Duration.Entity = value;
					if ((value != null))
					{
						value.ModIncallRates.Add(this);
						this._DurationId = value.Id;
					}
					else
					{
						this._DurationId = default(int);
					}
					this.SendPropertyChanged("Duration");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ModIncallPlace_ModIncallRate", Storage="_ModIncallPlace", ThisKey="ModIncallPlaceId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ModIncallPlace ModIncallPlace
		{
			get
			{
				return this._ModIncallPlace.Entity;
			}
			set
			{
				ModIncallPlace previousValue = this._ModIncallPlace.Entity;
				if (((previousValue != value) 
							|| (this._ModIncallPlace.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ModIncallPlace.Entity = null;
						previousValue.ModIncallRates.Remove(this);
					}
					this._ModIncallPlace.Entity = value;
					if ((value != null))
					{
						value.ModIncallRates.Add(this);
						this._ModIncallPlaceId = value.Id;
					}
					else
					{
						this._ModIncallPlaceId = default(int);
					}
					this.SendPropertyChanged("ModIncallPlace");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ModLanguageAlloc")]
	public partial class ModLanguageAlloc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ModelId;
		
		private int _LanguageId;
		
		private int _SkillId;
		
		private EntityRef<Language> _Language;
		
		private EntityRef<Model> _Model;
		
		private EntityRef<SkillLevel> _SkillLevel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnModelIdChanging(int value);
    partial void OnModelIdChanged();
    partial void OnLanguageIdChanging(int value);
    partial void OnLanguageIdChanged();
    partial void OnSkillIdChanging(int value);
    partial void OnSkillIdChanged();
    #endregion
		
		public ModLanguageAlloc()
		{
			this._Language = default(EntityRef<Language>);
			this._Model = default(EntityRef<Model>);
			this._SkillLevel = default(EntityRef<SkillLevel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelId", DbType="Int NOT NULL")]
		public int ModelId
		{
			get
			{
				return this._ModelId;
			}
			set
			{
				if ((this._ModelId != value))
				{
					if (this._Model.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModelIdChanging(value);
					this.SendPropertyChanging();
					this._ModelId = value;
					this.SendPropertyChanged("ModelId");
					this.OnModelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageId", DbType="Int NOT NULL")]
		public int LanguageId
		{
			get
			{
				return this._LanguageId;
			}
			set
			{
				if ((this._LanguageId != value))
				{
					if (this._Language.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLanguageIdChanging(value);
					this.SendPropertyChanging();
					this._LanguageId = value;
					this.SendPropertyChanged("LanguageId");
					this.OnLanguageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SkillId", DbType="Int NOT NULL")]
		public int SkillId
		{
			get
			{
				return this._SkillId;
			}
			set
			{
				if ((this._SkillId != value))
				{
					if (this._SkillLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSkillIdChanging(value);
					this.SendPropertyChanging();
					this._SkillId = value;
					this.SendPropertyChanged("SkillId");
					this.OnSkillIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_ModLanguageAlloc", Storage="_Language", ThisKey="LanguageId", OtherKey="Id", IsForeignKey=true)]
		public Language Language
		{
			get
			{
				return this._Language.Entity;
			}
			set
			{
				Language previousValue = this._Language.Entity;
				if (((previousValue != value) 
							|| (this._Language.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Language.Entity = null;
						previousValue.ModLanguageAllocs.Remove(this);
					}
					this._Language.Entity = value;
					if ((value != null))
					{
						value.ModLanguageAllocs.Add(this);
						this._LanguageId = value.Id;
					}
					else
					{
						this._LanguageId = default(int);
					}
					this.SendPropertyChanged("Language");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_ModLanguageAlloc", Storage="_Model", ThisKey="ModelId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Model Model
		{
			get
			{
				return this._Model.Entity;
			}
			set
			{
				Model previousValue = this._Model.Entity;
				if (((previousValue != value) 
							|| (this._Model.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Model.Entity = null;
						previousValue.ModLanguageAllocs.Remove(this);
					}
					this._Model.Entity = value;
					if ((value != null))
					{
						value.ModLanguageAllocs.Add(this);
						this._ModelId = value.Id;
					}
					else
					{
						this._ModelId = default(int);
					}
					this.SendPropertyChanged("Model");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SkillLevel_ModLanguageAlloc", Storage="_SkillLevel", ThisKey="SkillId", OtherKey="Id", IsForeignKey=true)]
		public SkillLevel SkillLevel
		{
			get
			{
				return this._SkillLevel.Entity;
			}
			set
			{
				SkillLevel previousValue = this._SkillLevel.Entity;
				if (((previousValue != value) 
							|| (this._SkillLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SkillLevel.Entity = null;
						previousValue.ModLanguageAllocs.Remove(this);
					}
					this._SkillLevel.Entity = value;
					if ((value != null))
					{
						value.ModLanguageAllocs.Add(this);
						this._SkillId = value.Id;
					}
					else
					{
						this._SkillId = default(int);
					}
					this.SendPropertyChanged("SkillLevel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ModNaturalPhoto")]
	public partial class ModNaturalPhoto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Image;
		
		private int _ModelId;
		
		private EntityRef<Model> _Model;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnModelIdChanging(int value);
    partial void OnModelIdChanged();
    #endregion
		
		public ModNaturalPhoto()
		{
			this._Model = default(EntityRef<Model>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="VarChar(MAX)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelId", DbType="Int NOT NULL")]
		public int ModelId
		{
			get
			{
				return this._ModelId;
			}
			set
			{
				if ((this._ModelId != value))
				{
					if (this._Model.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModelIdChanging(value);
					this.SendPropertyChanging();
					this._ModelId = value;
					this.SendPropertyChanged("ModelId");
					this.OnModelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_ModNaturalPhoto", Storage="_Model", ThisKey="ModelId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Model Model
		{
			get
			{
				return this._Model.Entity;
			}
			set
			{
				Model previousValue = this._Model.Entity;
				if (((previousValue != value) 
							|| (this._Model.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Model.Entity = null;
						previousValue.ModNaturalPhotos.Remove(this);
					}
					this._Model.Entity = value;
					if ((value != null))
					{
						value.ModNaturalPhotos.Add(this);
						this._ModelId = value.Id;
					}
					else
					{
						this._ModelId = default(int);
					}
					this.SendPropertyChanged("Model");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ModOutcallPlace")]
	public partial class ModOutcallPlace : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ModelId;
		
		private int _OutcallPlaceId;
		
		private EntitySet<ModOutcallRate> _ModOutcallRates;
		
		private EntityRef<Model> _Model;
		
		private EntityRef<OutcallPlace> _OutcallPlace;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnModelIdChanging(int value);
    partial void OnModelIdChanged();
    partial void OnOutcallPlaceIdChanging(int value);
    partial void OnOutcallPlaceIdChanged();
    #endregion
		
		public ModOutcallPlace()
		{
			this._ModOutcallRates = new EntitySet<ModOutcallRate>(new Action<ModOutcallRate>(this.attach_ModOutcallRates), new Action<ModOutcallRate>(this.detach_ModOutcallRates));
			this._Model = default(EntityRef<Model>);
			this._OutcallPlace = default(EntityRef<OutcallPlace>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelId", DbType="Int NOT NULL")]
		public int ModelId
		{
			get
			{
				return this._ModelId;
			}
			set
			{
				if ((this._ModelId != value))
				{
					if (this._Model.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModelIdChanging(value);
					this.SendPropertyChanging();
					this._ModelId = value;
					this.SendPropertyChanged("ModelId");
					this.OnModelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutcallPlaceId", DbType="Int NOT NULL")]
		public int OutcallPlaceId
		{
			get
			{
				return this._OutcallPlaceId;
			}
			set
			{
				if ((this._OutcallPlaceId != value))
				{
					if (this._OutcallPlace.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOutcallPlaceIdChanging(value);
					this.SendPropertyChanging();
					this._OutcallPlaceId = value;
					this.SendPropertyChanged("OutcallPlaceId");
					this.OnOutcallPlaceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ModOutcallPlace_ModOutcallRate", Storage="_ModOutcallRates", ThisKey="Id", OtherKey="ModOutcallPlaceId")]
		public EntitySet<ModOutcallRate> ModOutcallRates
		{
			get
			{
				return this._ModOutcallRates;
			}
			set
			{
				this._ModOutcallRates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_ModOutcallPlace", Storage="_Model", ThisKey="ModelId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Model Model
		{
			get
			{
				return this._Model.Entity;
			}
			set
			{
				Model previousValue = this._Model.Entity;
				if (((previousValue != value) 
							|| (this._Model.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Model.Entity = null;
						previousValue.ModOutcallPlaces.Remove(this);
					}
					this._Model.Entity = value;
					if ((value != null))
					{
						value.ModOutcallPlaces.Add(this);
						this._ModelId = value.Id;
					}
					else
					{
						this._ModelId = default(int);
					}
					this.SendPropertyChanged("Model");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OutcallPlace_ModOutcallPlace", Storage="_OutcallPlace", ThisKey="OutcallPlaceId", OtherKey="Id", IsForeignKey=true)]
		public OutcallPlace OutcallPlace
		{
			get
			{
				return this._OutcallPlace.Entity;
			}
			set
			{
				OutcallPlace previousValue = this._OutcallPlace.Entity;
				if (((previousValue != value) 
							|| (this._OutcallPlace.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OutcallPlace.Entity = null;
						previousValue.ModOutcallPlaces.Remove(this);
					}
					this._OutcallPlace.Entity = value;
					if ((value != null))
					{
						value.ModOutcallPlaces.Add(this);
						this._OutcallPlaceId = value.Id;
					}
					else
					{
						this._OutcallPlaceId = default(int);
					}
					this.SendPropertyChanged("OutcallPlace");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ModOutcallRates(ModOutcallRate entity)
		{
			this.SendPropertyChanging();
			entity.ModOutcallPlace = this;
		}
		
		private void detach_ModOutcallRates(ModOutcallRate entity)
		{
			this.SendPropertyChanging();
			entity.ModOutcallPlace = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ModOutcallRate")]
	public partial class ModOutcallRate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ModOutcallPlaceId;
		
		private int _DurationId;
		
		private System.Nullable<double> _Amount;
		
		private EntityRef<Duration> _Duration;
		
		private EntityRef<ModOutcallPlace> _ModOutcallPlace;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnModOutcallPlaceIdChanging(int value);
    partial void OnModOutcallPlaceIdChanged();
    partial void OnDurationIdChanging(int value);
    partial void OnDurationIdChanged();
    partial void OnAmountChanging(System.Nullable<double> value);
    partial void OnAmountChanged();
    #endregion
		
		public ModOutcallRate()
		{
			this._Duration = default(EntityRef<Duration>);
			this._ModOutcallPlace = default(EntityRef<ModOutcallPlace>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModOutcallPlaceId", DbType="Int NOT NULL")]
		public int ModOutcallPlaceId
		{
			get
			{
				return this._ModOutcallPlaceId;
			}
			set
			{
				if ((this._ModOutcallPlaceId != value))
				{
					if (this._ModOutcallPlace.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModOutcallPlaceIdChanging(value);
					this.SendPropertyChanging();
					this._ModOutcallPlaceId = value;
					this.SendPropertyChanged("ModOutcallPlaceId");
					this.OnModOutcallPlaceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DurationId", DbType="Int NOT NULL")]
		public int DurationId
		{
			get
			{
				return this._DurationId;
			}
			set
			{
				if ((this._DurationId != value))
				{
					if (this._Duration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDurationIdChanging(value);
					this.SendPropertyChanging();
					this._DurationId = value;
					this.SendPropertyChanged("DurationId");
					this.OnDurationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float")]
		public System.Nullable<double> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Duration_ModOutcallRate", Storage="_Duration", ThisKey="DurationId", OtherKey="Id", IsForeignKey=true)]
		public Duration Duration
		{
			get
			{
				return this._Duration.Entity;
			}
			set
			{
				Duration previousValue = this._Duration.Entity;
				if (((previousValue != value) 
							|| (this._Duration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Duration.Entity = null;
						previousValue.ModOutcallRates.Remove(this);
					}
					this._Duration.Entity = value;
					if ((value != null))
					{
						value.ModOutcallRates.Add(this);
						this._DurationId = value.Id;
					}
					else
					{
						this._DurationId = default(int);
					}
					this.SendPropertyChanged("Duration");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ModOutcallPlace_ModOutcallRate", Storage="_ModOutcallPlace", ThisKey="ModOutcallPlaceId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ModOutcallPlace ModOutcallPlace
		{
			get
			{
				return this._ModOutcallPlace.Entity;
			}
			set
			{
				ModOutcallPlace previousValue = this._ModOutcallPlace.Entity;
				if (((previousValue != value) 
							|| (this._ModOutcallPlace.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ModOutcallPlace.Entity = null;
						previousValue.ModOutcallRates.Remove(this);
					}
					this._ModOutcallPlace.Entity = value;
					if ((value != null))
					{
						value.ModOutcallRates.Add(this);
						this._ModOutcallPlaceId = value.Id;
					}
					else
					{
						this._ModOutcallPlaceId = default(int);
					}
					this.SendPropertyChanged("ModOutcallPlace");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ModPhoto")]
	public partial class ModPhoto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _GroupId;
		
		private string _Image;
		
		private int _ModelId;
		
		private EntityRef<Model> _Model;
		
		private EntityRef<PhotoGroup> _PhotoGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnGroupIdChanging(int value);
    partial void OnGroupIdChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnModelIdChanging(int value);
    partial void OnModelIdChanged();
    #endregion
		
		public ModPhoto()
		{
			this._Model = default(EntityRef<Model>);
			this._PhotoGroup = default(EntityRef<PhotoGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int NOT NULL")]
		public int GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._PhotoGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="VarChar(MAX)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelId", DbType="Int NOT NULL")]
		public int ModelId
		{
			get
			{
				return this._ModelId;
			}
			set
			{
				if ((this._ModelId != value))
				{
					if (this._Model.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModelIdChanging(value);
					this.SendPropertyChanging();
					this._ModelId = value;
					this.SendPropertyChanged("ModelId");
					this.OnModelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_ModPhoto", Storage="_Model", ThisKey="ModelId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Model Model
		{
			get
			{
				return this._Model.Entity;
			}
			set
			{
				Model previousValue = this._Model.Entity;
				if (((previousValue != value) 
							|| (this._Model.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Model.Entity = null;
						previousValue.ModPhotos.Remove(this);
					}
					this._Model.Entity = value;
					if ((value != null))
					{
						value.ModPhotos.Add(this);
						this._ModelId = value.Id;
					}
					else
					{
						this._ModelId = default(int);
					}
					this.SendPropertyChanged("Model");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhotoGroup_ModPhoto", Storage="_PhotoGroup", ThisKey="GroupId", OtherKey="Id", IsForeignKey=true)]
		public PhotoGroup PhotoGroup
		{
			get
			{
				return this._PhotoGroup.Entity;
			}
			set
			{
				PhotoGroup previousValue = this._PhotoGroup.Entity;
				if (((previousValue != value) 
							|| (this._PhotoGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PhotoGroup.Entity = null;
						previousValue.ModPhotos.Remove(this);
					}
					this._PhotoGroup.Entity = value;
					if ((value != null))
					{
						value.ModPhotos.Add(this);
						this._GroupId = value.Id;
					}
					else
					{
						this._GroupId = default(int);
					}
					this.SendPropertyChanged("PhotoGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ModServices")]
	public partial class ModService : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ModelId;
		
		private int _ServiceId;
		
		private System.Nullable<double> _Amount;
		
		private EntityRef<Model> _Model;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnModelIdChanging(int value);
    partial void OnModelIdChanged();
    partial void OnServiceIdChanging(int value);
    partial void OnServiceIdChanged();
    partial void OnAmountChanging(System.Nullable<double> value);
    partial void OnAmountChanged();
    #endregion
		
		public ModService()
		{
			this._Model = default(EntityRef<Model>);
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelId", DbType="Int NOT NULL")]
		public int ModelId
		{
			get
			{
				return this._ModelId;
			}
			set
			{
				if ((this._ModelId != value))
				{
					if (this._Model.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModelIdChanging(value);
					this.SendPropertyChanging();
					this._ModelId = value;
					this.SendPropertyChanged("ModelId");
					this.OnModelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceId", DbType="Int NOT NULL")]
		public int ServiceId
		{
			get
			{
				return this._ServiceId;
			}
			set
			{
				if ((this._ServiceId != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceId = value;
					this.SendPropertyChanged("ServiceId");
					this.OnServiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float")]
		public System.Nullable<double> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_ModService", Storage="_Model", ThisKey="ModelId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Model Model
		{
			get
			{
				return this._Model.Entity;
			}
			set
			{
				Model previousValue = this._Model.Entity;
				if (((previousValue != value) 
							|| (this._Model.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Model.Entity = null;
						previousValue.ModServices.Remove(this);
					}
					this._Model.Entity = value;
					if ((value != null))
					{
						value.ModServices.Add(this);
						this._ModelId = value.Id;
					}
					else
					{
						this._ModelId = default(int);
					}
					this.SendPropertyChanged("Model");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_ModService", Storage="_Service", ThisKey="ServiceId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.ModServices.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.ModServices.Add(this);
						this._ServiceId = value.Id;
					}
					else
					{
						this._ServiceId = default(int);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ModTour")]
	public partial class ModTour : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ModelId;
		
		private int _CityId;
		
		private System.Nullable<System.DateTime> _DateFrom;
		
		private System.Nullable<System.DateTime> _DateTo;
		
		private string _Phone;
		
		private string _Email;
		
		private EntityRef<City> _City;
		
		private EntityRef<Model> _Model;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnModelIdChanging(int value);
    partial void OnModelIdChanged();
    partial void OnCityIdChanging(int value);
    partial void OnCityIdChanged();
    partial void OnDateFromChanging(System.Nullable<System.DateTime> value);
    partial void OnDateFromChanged();
    partial void OnDateToChanging(System.Nullable<System.DateTime> value);
    partial void OnDateToChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public ModTour()
		{
			this._City = default(EntityRef<City>);
			this._Model = default(EntityRef<Model>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelId", DbType="Int NOT NULL")]
		public int ModelId
		{
			get
			{
				return this._ModelId;
			}
			set
			{
				if ((this._ModelId != value))
				{
					if (this._Model.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModelIdChanging(value);
					this.SendPropertyChanging();
					this._ModelId = value;
					this.SendPropertyChanged("ModelId");
					this.OnModelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", DbType="Int NOT NULL")]
		public int CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateFrom", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateFrom
		{
			get
			{
				return this._DateFrom;
			}
			set
			{
				if ((this._DateFrom != value))
				{
					this.OnDateFromChanging(value);
					this.SendPropertyChanging();
					this._DateFrom = value;
					this.SendPropertyChanged("DateFrom");
					this.OnDateFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTo", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateTo
		{
			get
			{
				return this._DateTo;
			}
			set
			{
				if ((this._DateTo != value))
				{
					this.OnDateToChanging(value);
					this.SendPropertyChanging();
					this._DateTo = value;
					this.SendPropertyChanged("DateTo");
					this.OnDateToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_ModTour", Storage="_City", ThisKey="CityId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.ModTours.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.ModTours.Add(this);
						this._CityId = value.Id;
					}
					else
					{
						this._CityId = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_ModTour", Storage="_Model", ThisKey="ModelId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Model Model
		{
			get
			{
				return this._Model.Entity;
			}
			set
			{
				Model previousValue = this._Model.Entity;
				if (((previousValue != value) 
							|| (this._Model.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Model.Entity = null;
						previousValue.ModTours.Remove(this);
					}
					this._Model.Entity = value;
					if ((value != null))
					{
						value.ModTours.Add(this);
						this._ModelId = value.Id;
					}
					else
					{
						this._ModelId = default(int);
					}
					this.SendPropertyChanged("Model");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ModVideos")]
	public partial class ModVideo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Video;
		
		private int _ModelId;
		
		private string _Note;
		
		private EntityRef<Model> _Model;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnVideoChanging(string value);
    partial void OnVideoChanged();
    partial void OnModelIdChanging(int value);
    partial void OnModelIdChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public ModVideo()
		{
			this._Model = default(EntityRef<Model>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Video", DbType="VarChar(MAX)")]
		public string Video
		{
			get
			{
				return this._Video;
			}
			set
			{
				if ((this._Video != value))
				{
					this.OnVideoChanging(value);
					this.SendPropertyChanging();
					this._Video = value;
					this.SendPropertyChanged("Video");
					this.OnVideoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelId", DbType="Int NOT NULL")]
		public int ModelId
		{
			get
			{
				return this._ModelId;
			}
			set
			{
				if ((this._ModelId != value))
				{
					if (this._Model.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModelIdChanging(value);
					this.SendPropertyChanging();
					this._ModelId = value;
					this.SendPropertyChanged("ModelId");
					this.OnModelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="VarChar(MAX)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_ModVideo", Storage="_Model", ThisKey="ModelId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Model Model
		{
			get
			{
				return this._Model.Entity;
			}
			set
			{
				Model previousValue = this._Model.Entity;
				if (((previousValue != value) 
							|| (this._Model.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Model.Entity = null;
						previousValue.ModVideos.Remove(this);
					}
					this._Model.Entity = value;
					if ((value != null))
					{
						value.ModVideos.Add(this);
						this._ModelId = value.Id;
					}
					else
					{
						this._ModelId = default(int);
					}
					this.SendPropertyChanged("Model");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ModWorkDayHour")]
	public partial class ModWorkDayHour : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ModelId;
		
		private int _DayId;
		
		private int _SHourId;
		
		private int _EHourId;
		
		private EntityRef<Model> _Model;
		
		private EntityRef<WorkDay> _WorkDay;
		
		private EntityRef<WorkHour> _WorkHour;
		
		private EntityRef<WorkHour> _WorkHour1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnModelIdChanging(int value);
    partial void OnModelIdChanged();
    partial void OnDayIdChanging(int value);
    partial void OnDayIdChanged();
    partial void OnSHourIdChanging(int value);
    partial void OnSHourIdChanged();
    partial void OnEHourIdChanging(int value);
    partial void OnEHourIdChanged();
    #endregion
		
		public ModWorkDayHour()
		{
			this._Model = default(EntityRef<Model>);
			this._WorkDay = default(EntityRef<WorkDay>);
			this._WorkHour = default(EntityRef<WorkHour>);
			this._WorkHour1 = default(EntityRef<WorkHour>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelId", DbType="Int NOT NULL")]
		public int ModelId
		{
			get
			{
				return this._ModelId;
			}
			set
			{
				if ((this._ModelId != value))
				{
					if (this._Model.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModelIdChanging(value);
					this.SendPropertyChanging();
					this._ModelId = value;
					this.SendPropertyChanged("ModelId");
					this.OnModelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayId", DbType="Int NOT NULL")]
		public int DayId
		{
			get
			{
				return this._DayId;
			}
			set
			{
				if ((this._DayId != value))
				{
					if (this._WorkDay.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDayIdChanging(value);
					this.SendPropertyChanging();
					this._DayId = value;
					this.SendPropertyChanged("DayId");
					this.OnDayIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SHourId", DbType="Int NOT NULL")]
		public int SHourId
		{
			get
			{
				return this._SHourId;
			}
			set
			{
				if ((this._SHourId != value))
				{
					if (this._WorkHour.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSHourIdChanging(value);
					this.SendPropertyChanging();
					this._SHourId = value;
					this.SendPropertyChanged("SHourId");
					this.OnSHourIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EHourId", DbType="Int NOT NULL")]
		public int EHourId
		{
			get
			{
				return this._EHourId;
			}
			set
			{
				if ((this._EHourId != value))
				{
					if (this._WorkHour1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEHourIdChanging(value);
					this.SendPropertyChanging();
					this._EHourId = value;
					this.SendPropertyChanged("EHourId");
					this.OnEHourIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_ModWorkDayHour", Storage="_Model", ThisKey="ModelId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Model Model
		{
			get
			{
				return this._Model.Entity;
			}
			set
			{
				Model previousValue = this._Model.Entity;
				if (((previousValue != value) 
							|| (this._Model.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Model.Entity = null;
						previousValue.ModWorkDayHours.Remove(this);
					}
					this._Model.Entity = value;
					if ((value != null))
					{
						value.ModWorkDayHours.Add(this);
						this._ModelId = value.Id;
					}
					else
					{
						this._ModelId = default(int);
					}
					this.SendPropertyChanged("Model");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkDay_ModWorkDayHour", Storage="_WorkDay", ThisKey="DayId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public WorkDay WorkDay
		{
			get
			{
				return this._WorkDay.Entity;
			}
			set
			{
				WorkDay previousValue = this._WorkDay.Entity;
				if (((previousValue != value) 
							|| (this._WorkDay.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkDay.Entity = null;
						previousValue.ModWorkDayHours.Remove(this);
					}
					this._WorkDay.Entity = value;
					if ((value != null))
					{
						value.ModWorkDayHours.Add(this);
						this._DayId = value.Id;
					}
					else
					{
						this._DayId = default(int);
					}
					this.SendPropertyChanged("WorkDay");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkHour_ModWorkDayHour", Storage="_WorkHour", ThisKey="SHourId", OtherKey="Id", IsForeignKey=true)]
		public WorkHour WorkHour
		{
			get
			{
				return this._WorkHour.Entity;
			}
			set
			{
				WorkHour previousValue = this._WorkHour.Entity;
				if (((previousValue != value) 
							|| (this._WorkHour.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkHour.Entity = null;
						previousValue.ModWorkDayHours.Remove(this);
					}
					this._WorkHour.Entity = value;
					if ((value != null))
					{
						value.ModWorkDayHours.Add(this);
						this._SHourId = value.Id;
					}
					else
					{
						this._SHourId = default(int);
					}
					this.SendPropertyChanged("WorkHour");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkHour_ModWorkDayHour1", Storage="_WorkHour1", ThisKey="EHourId", OtherKey="Id", IsForeignKey=true)]
		public WorkHour WorkHour1
		{
			get
			{
				return this._WorkHour1.Entity;
			}
			set
			{
				WorkHour previousValue = this._WorkHour1.Entity;
				if (((previousValue != value) 
							|| (this._WorkHour1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkHour1.Entity = null;
						previousValue.ModWorkDayHours1.Remove(this);
					}
					this._WorkHour1.Entity = value;
					if ((value != null))
					{
						value.ModWorkDayHours1.Add(this);
						this._EHourId = value.Id;
					}
					else
					{
						this._EHourId = default(int);
					}
					this.SendPropertyChanged("WorkHour1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ModWorkingCityAlloc")]
	public partial class ModWorkingCityAlloc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CityId;
		
		private int _ModelId;
		
		private EntityRef<City> _City;
		
		private EntityRef<Model> _Model;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCityIdChanging(int value);
    partial void OnCityIdChanged();
    partial void OnModelIdChanging(int value);
    partial void OnModelIdChanged();
    #endregion
		
		public ModWorkingCityAlloc()
		{
			this._City = default(EntityRef<City>);
			this._Model = default(EntityRef<Model>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", DbType="Int NOT NULL")]
		public int CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelId", DbType="Int NOT NULL")]
		public int ModelId
		{
			get
			{
				return this._ModelId;
			}
			set
			{
				if ((this._ModelId != value))
				{
					if (this._Model.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModelIdChanging(value);
					this.SendPropertyChanging();
					this._ModelId = value;
					this.SendPropertyChanged("ModelId");
					this.OnModelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_ModWorkingCityAlloc", Storage="_City", ThisKey="CityId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.ModWorkingCityAllocs.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.ModWorkingCityAllocs.Add(this);
						this._CityId = value.Id;
					}
					else
					{
						this._CityId = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_ModWorkingCityAlloc", Storage="_Model", ThisKey="ModelId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Model Model
		{
			get
			{
				return this._Model.Entity;
			}
			set
			{
				Model previousValue = this._Model.Entity;
				if (((previousValue != value) 
							|| (this._Model.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Model.Entity = null;
						previousValue.ModWorkingCityAllocs.Remove(this);
					}
					this._Model.Entity = value;
					if ((value != null))
					{
						value.ModWorkingCityAllocs.Add(this);
						this._ModelId = value.Id;
					}
					else
					{
						this._ModelId = default(int);
					}
					this.SendPropertyChanged("Model");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServiceGroup")]
	public partial class ServiceGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Description;
		
		private EntitySet<Service> _Services;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public ServiceGroup()
		{
			this._Services = new EntitySet<Service>(new Action<Service>(this.attach_Services), new Action<Service>(this.detach_Services));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceGroup_Service", Storage="_Services", ThisKey="Id", OtherKey="GroupId")]
		public EntitySet<Service> Services
		{
			get
			{
				return this._Services;
			}
			set
			{
				this._Services.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.ServiceGroup = this;
		}
		
		private void detach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.ServiceGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ModBiography")]
	public partial class ModBiography : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ModelId;
		
		private string _Name;
		
		private string _Slogan;
		
		private System.Nullable<int> _Age;
		
		private string _Sex;
		
		private System.Nullable<int> _EthnicityId;
		
		private System.Nullable<int> _NationalityId;
		
		private System.Nullable<int> _CityResidenceId;
		
		private System.Nullable<int> _HairColorId;
		
		private System.Nullable<int> _HairLenghId;
		
		private System.Nullable<int> _EyeId;
		
		private System.Nullable<double> _Height;
		
		private System.Nullable<double> _Weight;
		
		private System.Nullable<int> _DressSizeId;
		
		private System.Nullable<int> _Shoes;
		
		private string _Bust;
		
		private string _Waist;
		
		private string _Haunch;
		
		private System.Nullable<int> _BreastSizeId;
		
		private string _Seno;
		
		private string _Smoker;
		
		private string _Tattoos;
		
		private string _Drinker;
		
		private string _Piercing;
		
		private string _Peculiarities;
		
		private string _AboutMe;
		
		private EntityRef<BreastSize> _BreastSize;
		
		private EntityRef<DressSize> _DressSize;
		
		private EntityRef<Ethnicity> _Ethnicity;
		
		private EntityRef<Eye> _Eye;
		
		private EntityRef<HairColor> _HairColor;
		
		private EntityRef<HairLength> _HairLength;
		
		private EntityRef<City> _City;
		
		private EntityRef<Model> _Model;
		
		private EntityRef<Nationality> _Nationality;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnModelIdChanging(int value);
    partial void OnModelIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSloganChanging(string value);
    partial void OnSloganChanged();
    partial void OnAgeChanging(System.Nullable<int> value);
    partial void OnAgeChanged();
    partial void OnSexChanging(string value);
    partial void OnSexChanged();
    partial void OnEthnicityIdChanging(System.Nullable<int> value);
    partial void OnEthnicityIdChanged();
    partial void OnNationalityIdChanging(System.Nullable<int> value);
    partial void OnNationalityIdChanged();
    partial void OnCityResidenceIdChanging(System.Nullable<int> value);
    partial void OnCityResidenceIdChanged();
    partial void OnHairColorIdChanging(System.Nullable<int> value);
    partial void OnHairColorIdChanged();
    partial void OnHairLenghIdChanging(System.Nullable<int> value);
    partial void OnHairLenghIdChanged();
    partial void OnEyeIdChanging(System.Nullable<int> value);
    partial void OnEyeIdChanged();
    partial void OnHeightChanging(System.Nullable<double> value);
    partial void OnHeightChanged();
    partial void OnWeightChanging(System.Nullable<double> value);
    partial void OnWeightChanged();
    partial void OnDressSizeIdChanging(System.Nullable<int> value);
    partial void OnDressSizeIdChanged();
    partial void OnShoesChanging(System.Nullable<int> value);
    partial void OnShoesChanged();
    partial void OnBustChanging(string value);
    partial void OnBustChanged();
    partial void OnWaistChanging(string value);
    partial void OnWaistChanged();
    partial void OnHaunchChanging(string value);
    partial void OnHaunchChanged();
    partial void OnBreastSizeIdChanging(System.Nullable<int> value);
    partial void OnBreastSizeIdChanged();
    partial void OnSenoChanging(string value);
    partial void OnSenoChanged();
    partial void OnSmokerChanging(string value);
    partial void OnSmokerChanged();
    partial void OnTattoosChanging(string value);
    partial void OnTattoosChanged();
    partial void OnDrinkerChanging(string value);
    partial void OnDrinkerChanged();
    partial void OnPiercingChanging(string value);
    partial void OnPiercingChanged();
    partial void OnPeculiaritiesChanging(string value);
    partial void OnPeculiaritiesChanged();
    partial void OnAboutMeChanging(string value);
    partial void OnAboutMeChanged();
    #endregion
		
		public ModBiography()
		{
			this._BreastSize = default(EntityRef<BreastSize>);
			this._DressSize = default(EntityRef<DressSize>);
			this._Ethnicity = default(EntityRef<Ethnicity>);
			this._Eye = default(EntityRef<Eye>);
			this._HairColor = default(EntityRef<HairColor>);
			this._HairLength = default(EntityRef<HairLength>);
			this._City = default(EntityRef<City>);
			this._Model = default(EntityRef<Model>);
			this._Nationality = default(EntityRef<Nationality>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelId", DbType="Int NOT NULL")]
		public int ModelId
		{
			get
			{
				return this._ModelId;
			}
			set
			{
				if ((this._ModelId != value))
				{
					if (this._Model.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModelIdChanging(value);
					this.SendPropertyChanging();
					this._ModelId = value;
					this.SendPropertyChanged("ModelId");
					this.OnModelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Slogan", DbType="VarChar(50)")]
		public string Slogan
		{
			get
			{
				return this._Slogan;
			}
			set
			{
				if ((this._Slogan != value))
				{
					this.OnSloganChanging(value);
					this.SendPropertyChanging();
					this._Slogan = value;
					this.SendPropertyChanged("Slogan");
					this.OnSloganChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age", DbType="Int")]
		public System.Nullable<int> Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this.OnAgeChanging(value);
					this.SendPropertyChanging();
					this._Age = value;
					this.SendPropertyChanged("Age");
					this.OnAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sex", DbType="VarChar(50)")]
		public string Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EthnicityId", DbType="Int")]
		public System.Nullable<int> EthnicityId
		{
			get
			{
				return this._EthnicityId;
			}
			set
			{
				if ((this._EthnicityId != value))
				{
					if (this._Ethnicity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEthnicityIdChanging(value);
					this.SendPropertyChanging();
					this._EthnicityId = value;
					this.SendPropertyChanged("EthnicityId");
					this.OnEthnicityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NationalityId", DbType="Int")]
		public System.Nullable<int> NationalityId
		{
			get
			{
				return this._NationalityId;
			}
			set
			{
				if ((this._NationalityId != value))
				{
					if (this._Nationality.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNationalityIdChanging(value);
					this.SendPropertyChanging();
					this._NationalityId = value;
					this.SendPropertyChanged("NationalityId");
					this.OnNationalityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityResidenceId", DbType="Int")]
		public System.Nullable<int> CityResidenceId
		{
			get
			{
				return this._CityResidenceId;
			}
			set
			{
				if ((this._CityResidenceId != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityResidenceIdChanging(value);
					this.SendPropertyChanging();
					this._CityResidenceId = value;
					this.SendPropertyChanged("CityResidenceId");
					this.OnCityResidenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HairColorId", DbType="Int")]
		public System.Nullable<int> HairColorId
		{
			get
			{
				return this._HairColorId;
			}
			set
			{
				if ((this._HairColorId != value))
				{
					if (this._HairColor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHairColorIdChanging(value);
					this.SendPropertyChanging();
					this._HairColorId = value;
					this.SendPropertyChanged("HairColorId");
					this.OnHairColorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HairLenghId", DbType="Int")]
		public System.Nullable<int> HairLenghId
		{
			get
			{
				return this._HairLenghId;
			}
			set
			{
				if ((this._HairLenghId != value))
				{
					if (this._HairLength.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHairLenghIdChanging(value);
					this.SendPropertyChanging();
					this._HairLenghId = value;
					this.SendPropertyChanged("HairLenghId");
					this.OnHairLenghIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EyeId", DbType="Int")]
		public System.Nullable<int> EyeId
		{
			get
			{
				return this._EyeId;
			}
			set
			{
				if ((this._EyeId != value))
				{
					if (this._Eye.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEyeIdChanging(value);
					this.SendPropertyChanging();
					this._EyeId = value;
					this.SendPropertyChanged("EyeId");
					this.OnEyeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="Float")]
		public System.Nullable<double> Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="Float")]
		public System.Nullable<double> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DressSizeId", DbType="Int")]
		public System.Nullable<int> DressSizeId
		{
			get
			{
				return this._DressSizeId;
			}
			set
			{
				if ((this._DressSizeId != value))
				{
					if (this._DressSize.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDressSizeIdChanging(value);
					this.SendPropertyChanging();
					this._DressSizeId = value;
					this.SendPropertyChanged("DressSizeId");
					this.OnDressSizeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shoes", DbType="Int")]
		public System.Nullable<int> Shoes
		{
			get
			{
				return this._Shoes;
			}
			set
			{
				if ((this._Shoes != value))
				{
					this.OnShoesChanging(value);
					this.SendPropertyChanging();
					this._Shoes = value;
					this.SendPropertyChanged("Shoes");
					this.OnShoesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bust", DbType="VarChar(50)")]
		public string Bust
		{
			get
			{
				return this._Bust;
			}
			set
			{
				if ((this._Bust != value))
				{
					this.OnBustChanging(value);
					this.SendPropertyChanging();
					this._Bust = value;
					this.SendPropertyChanged("Bust");
					this.OnBustChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Waist", DbType="VarChar(50)")]
		public string Waist
		{
			get
			{
				return this._Waist;
			}
			set
			{
				if ((this._Waist != value))
				{
					this.OnWaistChanging(value);
					this.SendPropertyChanging();
					this._Waist = value;
					this.SendPropertyChanged("Waist");
					this.OnWaistChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Haunch", DbType="VarChar(50)")]
		public string Haunch
		{
			get
			{
				return this._Haunch;
			}
			set
			{
				if ((this._Haunch != value))
				{
					this.OnHaunchChanging(value);
					this.SendPropertyChanging();
					this._Haunch = value;
					this.SendPropertyChanged("Haunch");
					this.OnHaunchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BreastSizeId", DbType="Int")]
		public System.Nullable<int> BreastSizeId
		{
			get
			{
				return this._BreastSizeId;
			}
			set
			{
				if ((this._BreastSizeId != value))
				{
					if (this._BreastSize.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBreastSizeIdChanging(value);
					this.SendPropertyChanging();
					this._BreastSizeId = value;
					this.SendPropertyChanged("BreastSizeId");
					this.OnBreastSizeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Seno", DbType="VarChar(50)")]
		public string Seno
		{
			get
			{
				return this._Seno;
			}
			set
			{
				if ((this._Seno != value))
				{
					this.OnSenoChanging(value);
					this.SendPropertyChanging();
					this._Seno = value;
					this.SendPropertyChanged("Seno");
					this.OnSenoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Smoker", DbType="VarChar(50)")]
		public string Smoker
		{
			get
			{
				return this._Smoker;
			}
			set
			{
				if ((this._Smoker != value))
				{
					this.OnSmokerChanging(value);
					this.SendPropertyChanging();
					this._Smoker = value;
					this.SendPropertyChanged("Smoker");
					this.OnSmokerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tattoos", DbType="VarChar(50)")]
		public string Tattoos
		{
			get
			{
				return this._Tattoos;
			}
			set
			{
				if ((this._Tattoos != value))
				{
					this.OnTattoosChanging(value);
					this.SendPropertyChanging();
					this._Tattoos = value;
					this.SendPropertyChanged("Tattoos");
					this.OnTattoosChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Drinker", DbType="VarChar(50)")]
		public string Drinker
		{
			get
			{
				return this._Drinker;
			}
			set
			{
				if ((this._Drinker != value))
				{
					this.OnDrinkerChanging(value);
					this.SendPropertyChanging();
					this._Drinker = value;
					this.SendPropertyChanged("Drinker");
					this.OnDrinkerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Piercing", DbType="VarChar(50)")]
		public string Piercing
		{
			get
			{
				return this._Piercing;
			}
			set
			{
				if ((this._Piercing != value))
				{
					this.OnPiercingChanging(value);
					this.SendPropertyChanging();
					this._Piercing = value;
					this.SendPropertyChanged("Piercing");
					this.OnPiercingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Peculiarities", DbType="VarChar(50)")]
		public string Peculiarities
		{
			get
			{
				return this._Peculiarities;
			}
			set
			{
				if ((this._Peculiarities != value))
				{
					this.OnPeculiaritiesChanging(value);
					this.SendPropertyChanging();
					this._Peculiarities = value;
					this.SendPropertyChanged("Peculiarities");
					this.OnPeculiaritiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AboutMe", DbType="VarChar(MAX)")]
		public string AboutMe
		{
			get
			{
				return this._AboutMe;
			}
			set
			{
				if ((this._AboutMe != value))
				{
					this.OnAboutMeChanging(value);
					this.SendPropertyChanging();
					this._AboutMe = value;
					this.SendPropertyChanged("AboutMe");
					this.OnAboutMeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BreastSize_ModBiography", Storage="_BreastSize", ThisKey="BreastSizeId", OtherKey="Id", IsForeignKey=true)]
		public BreastSize BreastSize
		{
			get
			{
				return this._BreastSize.Entity;
			}
			set
			{
				BreastSize previousValue = this._BreastSize.Entity;
				if (((previousValue != value) 
							|| (this._BreastSize.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BreastSize.Entity = null;
						previousValue.ModBiographies.Remove(this);
					}
					this._BreastSize.Entity = value;
					if ((value != null))
					{
						value.ModBiographies.Add(this);
						this._BreastSizeId = value.Id;
					}
					else
					{
						this._BreastSizeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("BreastSize");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DressSize_ModBiography", Storage="_DressSize", ThisKey="DressSizeId", OtherKey="Id", IsForeignKey=true)]
		public DressSize DressSize
		{
			get
			{
				return this._DressSize.Entity;
			}
			set
			{
				DressSize previousValue = this._DressSize.Entity;
				if (((previousValue != value) 
							|| (this._DressSize.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DressSize.Entity = null;
						previousValue.ModBiographies.Remove(this);
					}
					this._DressSize.Entity = value;
					if ((value != null))
					{
						value.ModBiographies.Add(this);
						this._DressSizeId = value.Id;
					}
					else
					{
						this._DressSizeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("DressSize");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ethnicity_ModBiography", Storage="_Ethnicity", ThisKey="EthnicityId", OtherKey="Id", IsForeignKey=true)]
		public Ethnicity Ethnicity
		{
			get
			{
				return this._Ethnicity.Entity;
			}
			set
			{
				Ethnicity previousValue = this._Ethnicity.Entity;
				if (((previousValue != value) 
							|| (this._Ethnicity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ethnicity.Entity = null;
						previousValue.ModBiographies.Remove(this);
					}
					this._Ethnicity.Entity = value;
					if ((value != null))
					{
						value.ModBiographies.Add(this);
						this._EthnicityId = value.Id;
					}
					else
					{
						this._EthnicityId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Ethnicity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Eye_ModBiography", Storage="_Eye", ThisKey="EyeId", OtherKey="Id", IsForeignKey=true)]
		public Eye Eye
		{
			get
			{
				return this._Eye.Entity;
			}
			set
			{
				Eye previousValue = this._Eye.Entity;
				if (((previousValue != value) 
							|| (this._Eye.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Eye.Entity = null;
						previousValue.ModBiographies.Remove(this);
					}
					this._Eye.Entity = value;
					if ((value != null))
					{
						value.ModBiographies.Add(this);
						this._EyeId = value.Id;
					}
					else
					{
						this._EyeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Eye");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HairColor_ModBiography", Storage="_HairColor", ThisKey="HairColorId", OtherKey="Id", IsForeignKey=true)]
		public HairColor HairColor
		{
			get
			{
				return this._HairColor.Entity;
			}
			set
			{
				HairColor previousValue = this._HairColor.Entity;
				if (((previousValue != value) 
							|| (this._HairColor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HairColor.Entity = null;
						previousValue.ModBiographies.Remove(this);
					}
					this._HairColor.Entity = value;
					if ((value != null))
					{
						value.ModBiographies.Add(this);
						this._HairColorId = value.Id;
					}
					else
					{
						this._HairColorId = default(Nullable<int>);
					}
					this.SendPropertyChanged("HairColor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HairLength_ModBiography", Storage="_HairLength", ThisKey="HairLenghId", OtherKey="Id", IsForeignKey=true)]
		public HairLength HairLength
		{
			get
			{
				return this._HairLength.Entity;
			}
			set
			{
				HairLength previousValue = this._HairLength.Entity;
				if (((previousValue != value) 
							|| (this._HairLength.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HairLength.Entity = null;
						previousValue.ModBiographies.Remove(this);
					}
					this._HairLength.Entity = value;
					if ((value != null))
					{
						value.ModBiographies.Add(this);
						this._HairLenghId = value.Id;
					}
					else
					{
						this._HairLenghId = default(Nullable<int>);
					}
					this.SendPropertyChanged("HairLength");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_ModBiography", Storage="_City", ThisKey="CityResidenceId", OtherKey="Id", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.ModBiographies.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.ModBiographies.Add(this);
						this._CityResidenceId = value.Id;
					}
					else
					{
						this._CityResidenceId = default(Nullable<int>);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_ModBiography", Storage="_Model", ThisKey="ModelId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Model Model
		{
			get
			{
				return this._Model.Entity;
			}
			set
			{
				Model previousValue = this._Model.Entity;
				if (((previousValue != value) 
							|| (this._Model.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Model.Entity = null;
						previousValue.ModBiographies.Remove(this);
					}
					this._Model.Entity = value;
					if ((value != null))
					{
						value.ModBiographies.Add(this);
						this._ModelId = value.Id;
					}
					else
					{
						this._ModelId = default(int);
					}
					this.SendPropertyChanged("Model");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nationality_ModBiography", Storage="_Nationality", ThisKey="NationalityId", OtherKey="Id", IsForeignKey=true)]
		public Nationality Nationality
		{
			get
			{
				return this._Nationality.Entity;
			}
			set
			{
				Nationality previousValue = this._Nationality.Entity;
				if (((previousValue != value) 
							|| (this._Nationality.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Nationality.Entity = null;
						previousValue.ModBiographies.Remove(this);
					}
					this._Nationality.Entity = value;
					if ((value != null))
					{
						value.ModBiographies.Add(this);
						this._NationalityId = value.Id;
					}
					else
					{
						this._NationalityId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Nationality");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ModContacts")]
	public partial class ModContact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ModelId;
		
		private System.Nullable<int> _SocialChatId;
		
		private System.Nullable<int> _InstructionChatId;
		
		private string _Email;
		
		private string _MobilePhone;
		
		private string _Address;
		
		private string _AddressCiv;
		
		private EntityRef<InstructionChat> _InstructionChat;
		
		private EntityRef<Model> _Model;
		
		private EntityRef<SocialChat> _SocialChat;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnModelIdChanging(int value);
    partial void OnModelIdChanged();
    partial void OnSocialChatIdChanging(System.Nullable<int> value);
    partial void OnSocialChatIdChanged();
    partial void OnInstructionChatIdChanging(System.Nullable<int> value);
    partial void OnInstructionChatIdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnMobilePhoneChanging(string value);
    partial void OnMobilePhoneChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnAddressCivChanging(string value);
    partial void OnAddressCivChanged();
    #endregion
		
		public ModContact()
		{
			this._InstructionChat = default(EntityRef<InstructionChat>);
			this._Model = default(EntityRef<Model>);
			this._SocialChat = default(EntityRef<SocialChat>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelId", DbType="Int NOT NULL")]
		public int ModelId
		{
			get
			{
				return this._ModelId;
			}
			set
			{
				if ((this._ModelId != value))
				{
					if (this._Model.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModelIdChanging(value);
					this.SendPropertyChanging();
					this._ModelId = value;
					this.SendPropertyChanged("ModelId");
					this.OnModelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SocialChatId", DbType="Int")]
		public System.Nullable<int> SocialChatId
		{
			get
			{
				return this._SocialChatId;
			}
			set
			{
				if ((this._SocialChatId != value))
				{
					if (this._SocialChat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSocialChatIdChanging(value);
					this.SendPropertyChanging();
					this._SocialChatId = value;
					this.SendPropertyChanged("SocialChatId");
					this.OnSocialChatIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstructionChatId", DbType="Int")]
		public System.Nullable<int> InstructionChatId
		{
			get
			{
				return this._InstructionChatId;
			}
			set
			{
				if ((this._InstructionChatId != value))
				{
					if (this._InstructionChat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstructionChatIdChanging(value);
					this.SendPropertyChanging();
					this._InstructionChatId = value;
					this.SendPropertyChanged("InstructionChatId");
					this.OnInstructionChatIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(MAX)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobilePhone", DbType="VarChar(50)")]
		public string MobilePhone
		{
			get
			{
				return this._MobilePhone;
			}
			set
			{
				if ((this._MobilePhone != value))
				{
					this.OnMobilePhoneChanging(value);
					this.SendPropertyChanging();
					this._MobilePhone = value;
					this.SendPropertyChanged("MobilePhone");
					this.OnMobilePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressCiv", DbType="VarChar(MAX)")]
		public string AddressCiv
		{
			get
			{
				return this._AddressCiv;
			}
			set
			{
				if ((this._AddressCiv != value))
				{
					this.OnAddressCivChanging(value);
					this.SendPropertyChanging();
					this._AddressCiv = value;
					this.SendPropertyChanged("AddressCiv");
					this.OnAddressCivChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InstructionChat_ModContact", Storage="_InstructionChat", ThisKey="InstructionChatId", OtherKey="Id", IsForeignKey=true)]
		public InstructionChat InstructionChat
		{
			get
			{
				return this._InstructionChat.Entity;
			}
			set
			{
				InstructionChat previousValue = this._InstructionChat.Entity;
				if (((previousValue != value) 
							|| (this._InstructionChat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InstructionChat.Entity = null;
						previousValue.ModContacts.Remove(this);
					}
					this._InstructionChat.Entity = value;
					if ((value != null))
					{
						value.ModContacts.Add(this);
						this._InstructionChatId = value.Id;
					}
					else
					{
						this._InstructionChatId = default(Nullable<int>);
					}
					this.SendPropertyChanged("InstructionChat");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_ModContact", Storage="_Model", ThisKey="ModelId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Model Model
		{
			get
			{
				return this._Model.Entity;
			}
			set
			{
				Model previousValue = this._Model.Entity;
				if (((previousValue != value) 
							|| (this._Model.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Model.Entity = null;
						previousValue.ModContacts.Remove(this);
					}
					this._Model.Entity = value;
					if ((value != null))
					{
						value.ModContacts.Add(this);
						this._ModelId = value.Id;
					}
					else
					{
						this._ModelId = default(int);
					}
					this.SendPropertyChanged("Model");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SocialChat_ModContact", Storage="_SocialChat", ThisKey="SocialChatId", OtherKey="Id", IsForeignKey=true)]
		public SocialChat SocialChat
		{
			get
			{
				return this._SocialChat.Entity;
			}
			set
			{
				SocialChat previousValue = this._SocialChat.Entity;
				if (((previousValue != value) 
							|| (this._SocialChat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SocialChat.Entity = null;
						previousValue.ModContacts.Remove(this);
					}
					this._SocialChat.Entity = value;
					if ((value != null))
					{
						value.ModContacts.Add(this);
						this._SocialChatId = value.Id;
					}
					else
					{
						this._SocialChatId = default(Nullable<int>);
					}
					this.SendPropertyChanged("SocialChat");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserInfo")]
	public partial class UserInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Surname;
		
		private string _Address;
		
		private string _CAP;
		
		private System.Nullable<int> _CityResidenceId;
		
		private System.Nullable<int> _NationalityId;
		
		private System.Nullable<System.DateTime> _DateOfBirth;
		
		private string _Society;
		
		private string _VatNumber;
		
		private string _LicenceNumber;
		
		private string _Website;
		
		private string _Email;
		
		private string _Mobile;
		
		private string _Phone;
		
		private string _Note;
		
		private int _UserId;
		
		private EntityRef<City> _City;
		
		private EntityRef<Model> _Model;
		
		private EntityRef<Nationality> _Nationality;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCAPChanging(string value);
    partial void OnCAPChanged();
    partial void OnCityResidenceIdChanging(System.Nullable<int> value);
    partial void OnCityResidenceIdChanged();
    partial void OnNationalityIdChanging(System.Nullable<int> value);
    partial void OnNationalityIdChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    partial void OnSocietyChanging(string value);
    partial void OnSocietyChanged();
    partial void OnVatNumberChanging(string value);
    partial void OnVatNumberChanged();
    partial void OnLicenceNumberChanging(string value);
    partial void OnLicenceNumberChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    #endregion
		
		public UserInfo()
		{
			this._City = default(EntityRef<City>);
			this._Model = default(EntityRef<Model>);
			this._Nationality = default(EntityRef<Nationality>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="VarChar(50)")]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CAP", DbType="VarChar(50)")]
		public string CAP
		{
			get
			{
				return this._CAP;
			}
			set
			{
				if ((this._CAP != value))
				{
					this.OnCAPChanging(value);
					this.SendPropertyChanging();
					this._CAP = value;
					this.SendPropertyChanged("CAP");
					this.OnCAPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityResidenceId", DbType="Int")]
		public System.Nullable<int> CityResidenceId
		{
			get
			{
				return this._CityResidenceId;
			}
			set
			{
				if ((this._CityResidenceId != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityResidenceIdChanging(value);
					this.SendPropertyChanging();
					this._CityResidenceId = value;
					this.SendPropertyChanged("CityResidenceId");
					this.OnCityResidenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NationalityId", DbType="Int")]
		public System.Nullable<int> NationalityId
		{
			get
			{
				return this._NationalityId;
			}
			set
			{
				if ((this._NationalityId != value))
				{
					if (this._Nationality.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNationalityIdChanging(value);
					this.SendPropertyChanging();
					this._NationalityId = value;
					this.SendPropertyChanged("NationalityId");
					this.OnNationalityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date")]
		public System.Nullable<System.DateTime> DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Society", DbType="VarChar(50)")]
		public string Society
		{
			get
			{
				return this._Society;
			}
			set
			{
				if ((this._Society != value))
				{
					this.OnSocietyChanging(value);
					this.SendPropertyChanging();
					this._Society = value;
					this.SendPropertyChanged("Society");
					this.OnSocietyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VatNumber", DbType="VarChar(50)")]
		public string VatNumber
		{
			get
			{
				return this._VatNumber;
			}
			set
			{
				if ((this._VatNumber != value))
				{
					this.OnVatNumberChanging(value);
					this.SendPropertyChanging();
					this._VatNumber = value;
					this.SendPropertyChanged("VatNumber");
					this.OnVatNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicenceNumber", DbType="VarChar(50)")]
		public string LicenceNumber
		{
			get
			{
				return this._LicenceNumber;
			}
			set
			{
				if ((this._LicenceNumber != value))
				{
					this.OnLicenceNumberChanging(value);
					this.SendPropertyChanging();
					this._LicenceNumber = value;
					this.SendPropertyChanged("LicenceNumber");
					this.OnLicenceNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Website", DbType="VarChar(MAX)")]
		public string Website
		{
			get
			{
				return this._Website;
			}
			set
			{
				if ((this._Website != value))
				{
					this.OnWebsiteChanging(value);
					this.SendPropertyChanging();
					this._Website = value;
					this.SendPropertyChanged("Website");
					this.OnWebsiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="VarChar(50)")]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="VarChar(MAX)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._Model.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_UserInfo", Storage="_City", ThisKey="CityResidenceId", OtherKey="Id", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.UserInfos.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.UserInfos.Add(this);
						this._CityResidenceId = value.Id;
					}
					else
					{
						this._CityResidenceId = default(Nullable<int>);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_UserInfo", Storage="_Model", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Model Model
		{
			get
			{
				return this._Model.Entity;
			}
			set
			{
				Model previousValue = this._Model.Entity;
				if (((previousValue != value) 
							|| (this._Model.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Model.Entity = null;
						previousValue.UserInfos.Remove(this);
					}
					this._Model.Entity = value;
					if ((value != null))
					{
						value.UserInfos.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("Model");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nationality_UserInfo", Storage="_Nationality", ThisKey="NationalityId", OtherKey="Id", IsForeignKey=true)]
		public Nationality Nationality
		{
			get
			{
				return this._Nationality.Entity;
			}
			set
			{
				Nationality previousValue = this._Nationality.Entity;
				if (((previousValue != value) 
							|| (this._Nationality.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Nationality.Entity = null;
						previousValue.UserInfos.Remove(this);
					}
					this._Nationality.Entity = value;
					if ((value != null))
					{
						value.UserInfos.Add(this);
						this._NationalityId = value.Id;
					}
					else
					{
						this._NationalityId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Nationality");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
